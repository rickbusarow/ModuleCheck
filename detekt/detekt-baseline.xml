<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (C) 2021-2022 Rick Busarow
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:dependencies.kt$ suspend fun McProject.closestDeclarationOrNull( newDependency: ConfiguredDependency, matchPathFirst: Boolean ): DependencyDeclaration?</ID>
    <ID>MagicNumber:ArtifactsTask.kt$ArtifactsTask$4</ID>
    <ID>MagicNumber:build.gradle.kts$11</ID>
    <ID>MagicNumber:mcbuild.java-library.gradle.kts$11</ID>
    <ID>MaxLineLength:build.gradle.kts$"max-line-length"</ID>
    <ID>NestedBlockDepth:ArtifactsCheckTask.kt$ArtifactsCheckTask$private fun StringBuilder.maybeAddChangedValueMessages( changed: List&lt;Pair&lt;ArtifactConfig, ArtifactConfig>> ): StringBuilder</ID>
    <ID>OutdatedDocumentation:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$ fun addModuleStatement( configName: ConfigurationName, parsedString: String, projectPath: ProjectPath, projectAccessor: ProjectAccessor, suppressed: List&lt;String> )</ID>
    <ID>OutdatedDocumentation:AppScope.kt$SingleIn</ID>
    <ID>OutdatedDocumentation:ArtifactConfig.kt$ArtifactConfig : Serializable</ID>
    <ID>OutdatedDocumentation:ConfiguredDependency.kt$PluginDependency : Dependency</ID>
    <ID>OutdatedDocumentation:ModuleCheckRunner.kt$ModuleCheckRunner</ID>
    <ID>OutdatedDocumentation:OverShotDependencyFinding.kt$OverShotDependency</ID>
    <ID>OutdatedDocumentation:precompiled.kt$ suspend fun &lt;T> ConfigurationName.isDefinitelyPrecompiledForProject(project: T): Boolean</ID>
    <ID>SerialVersionUIDInSerializableClass:ArtifactConfig.kt$ArtifactConfig : Serializable</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$AbstractDependenciesBlock : DependenciesBlock</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$DependenciesBlocksProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$AbstractModuleCheckTask : DefaultTask</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$MultiRuleModuleCheckTask : AbstractModuleCheckTask</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$SingleRuleModuleCheckTask : AbstractModuleCheckTask</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$AbstractPluginsBlock : PluginsBlock</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$PluginsBlockProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AbstractProjectDependencyFinding.kt$AbstractProjectDependencyFinding : ProblemFixableFindingDependencyFindingConfiguredDependencyFinding</ID>
    <ID>UndocumentedPublicClass:AddsDependency.kt$AddsDependency : Fixable</ID>
    <ID>UndocumentedPublicClass:AndroidBasePackages.kt$AndroidBasePackages : Element</ID>
    <ID>UndocumentedPublicClass:AndroidBasePackages.kt$AndroidBasePackages$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations : Element</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingNameProvider.kt$AndroidDataBindingNameProvider</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingReferenceParsingInterceptor.kt$AndroidDataBindingReferenceParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings$AgpBlock : Block</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings.AgpBlock$AndroidBlock : AgpBlock</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings.AgpBlock$BuildFeaturesBlock : AgpBlock</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettingsProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AndroidLayoutParser.kt$AndroidLayoutParser</ID>
    <ID>UndocumentedPublicClass:AndroidManifestParser.kt$AndroidManifestParser</ID>
    <ID>UndocumentedPublicClass:AndroidPlatformPluginFactory.kt$AndroidPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:AndroidRDeclaredNames.kt$AndroidRDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidRNameProvider.kt$AndroidRNameProvider</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$AndroidDataBindingDeclaredName : AndroidResourceDeclaredNameJavaCompatibleDeclaredNameKotlinCompatibleDeclaredNameXmlCompatibleDeclaredNameGenerated</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$AndroidResourceDeclaredName : DeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$GeneratedAndroidResourceDeclaredName : AndroidResourceDeclaredNameJavaCompatibleDeclaredNameKotlinCompatibleDeclaredNameXmlCompatibleDeclaredNameGenerated</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName : AndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$AndroidInteger : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$AndroidString : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Anim : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Animator : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Arrays : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Bool : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Color : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Dimen : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Drawable : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Font : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$ID : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Layout : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Menu : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Mipmap : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Raw : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$Style : UnqualifiedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidResourceParser.kt$AndroidResourceParser</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReference.kt$AndroidDataBindingReference : AndroidResourceReferenceExplicitReference</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReference.kt$AndroidRReference : AndroidResourceReferenceExplicitReferenceKotlinReferenceJavaReference</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReference.kt$AndroidResourceReference : ReferenceAgnosticReference</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReference.kt$QualifiedAndroidResourceReference : AndroidResourceReferenceExplicitReferenceKotlinReferenceJavaReference</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReference.kt$UnqualifiedAndroidResourceReference : AndroidResourceReferenceExplicitReference</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferenceParsingInterceptor.kt$AndroidResourceReferenceParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferences.kt$AndroidResourceReferences : Element</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferences.kt$AndroidResourceReferences$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidSourceSetsParser.kt$AndroidSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:AndroidSourceSetsParser.kt$AndroidSourceSetsParser$Factory</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFile.kt$AndroidStylesFile : XmlFile</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFiles.kt$AndroidStylesFiles : Element</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFiles.kt$AndroidStylesFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidStylesParser.kt$AndroidStylesParser</ID>
    <ID>UndocumentedPublicClass:AndroidUnqualifiedDeclarationNames.kt$AndroidUnqualifiedDeclarationNames : Element</ID>
    <ID>UndocumentedPublicClass:AndroidUnqualifiedDeclarationNames.kt$AndroidUnqualifiedDeclarationNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilFactoryRule.kt$AnvilFactoryRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilAnnotatedType</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilGradlePlugin</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilScopeName</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilScopeNameEntry</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$RawAnvilAnnotatedType</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilGraph : Element</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilGraph$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilScopedDeclarations</ID>
    <ID>UndocumentedPublicClass:AnvilScopeContributions.kt$AnvilScopeContributions : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeContributions.kt$AnvilScopeContributions$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilScopeDependencies.kt$AnvilScopeDependencies : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeDependencies.kt$AnvilScopeDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilScopeMerges.kt$AnvilScopeMerges : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeMerges.kt$AnvilScopeMerges$Key : Key</ID>
    <ID>UndocumentedPublicClass:AppScope.kt$AppScope</ID>
    <ID>UndocumentedPublicClass:AppScope.kt$DocsWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:AppScope.kt$ModuleCheckVersionProvider</ID>
    <ID>UndocumentedPublicClass:AppScope.kt$RootGradleProject</ID>
    <ID>UndocumentedPublicClass:AppScope.kt$SourceWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:ArtifactIdListener.kt$ArtifactIdListener</ID>
    <ID>UndocumentedPublicClass:ArtifactsCheckTask.kt$ArtifactsCheckTask$Color</ID>
    <ID>UndocumentedPublicClass:ArtifactsTask.kt$ArtifactsTask : DefaultTask</ID>
    <ID>UndocumentedPublicClass:Assignment.kt$Assignment : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:BaseTest.kt$BaseTest : HermitJUnit5FancyShould</ID>
    <ID>UndocumentedPublicClass:Block.kt$Block&lt;T></ID>
    <ID>UndocumentedPublicClass:BuildFileParser.kt$BuildFileParser</ID>
    <ID>UndocumentedPublicClass:BuildFileParser.kt$BuildFileParser$Factory</ID>
    <ID>UndocumentedPublicClass:BuildFileStatement.kt$BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:CheckstyleReporter.kt$CheckstyleReporter</ID>
    <ID>UndocumentedPublicClass:ClasspathDependencies.kt$ClasspathDependencies : Element</ID>
    <ID>UndocumentedPublicClass:ClasspathDependencies.kt$ClasspathDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:ConcatenatingParsingInterceptor.kt$ConcatenatingParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:Config.kt$Config</ID>
    <ID>UndocumentedPublicClass:Config.kt$ConfigurationName : Comparable</ID>
    <ID>UndocumentedPublicClass:Config.kt$Configurations : Map</ID>
    <ID>UndocumentedPublicClass:ConfigFactory.kt$ConfigFactory&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:ConfigurationsFactory.kt$ConfigurationsFactory</ID>
    <ID>UndocumentedPublicClass:ConfiguredDependency.kt$ConfiguredDependency : Dependency</ID>
    <ID>UndocumentedPublicClass:ConfiguredDependency.kt$Dependency</ID>
    <ID>UndocumentedPublicClass:CoroutineScopeModule.kt$CoroutineScopeModule</ID>
    <ID>UndocumentedPublicClass:CoroutineScopeModule.kt$DispatcherProviderComponent</ID>
    <ID>UndocumentedPublicClass:CouldUseAnvilFinding.kt$CouldUseAnvilFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:DIListener.kt$DIListener</ID>
    <ID>UndocumentedPublicClass:DeclarationVisitor.kt$DeclarationVisitor : KtTreeVisitorVoid</ID>
    <ID>UndocumentedPublicClass:Declarations.kt$Declarations : Element</ID>
    <ID>UndocumentedPublicClass:Declarations.kt$Declarations$Key : Key</ID>
    <ID>UndocumentedPublicClass:DeclaredName.kt$Generated : DeclaredName</ID>
    <ID>UndocumentedPublicClass:DeclaredName.kt$JavaCompatibleDeclaredName : DeclaredName</ID>
    <ID>UndocumentedPublicClass:DeclaredName.kt$KotlinCompatibleDeclaredName : DeclaredName</ID>
    <ID>UndocumentedPublicClass:DeclaredName.kt$XmlCompatibleDeclaredName : JavaCompatibleDeclaredNameDeclaredName</ID>
    <ID>UndocumentedPublicClass:Deletable.kt$Deletable : FindingDependencyFinding</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlock : BlockHasSuppressedChildren</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlocksProvider$Factory</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$DependencyDeclaration : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$DependencyDeclaration$ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$ExternalDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$ModuleDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$UnknownDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources : Element</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$Key : Key</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$SourceKey</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$SourceResult</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources.SourceResult$Found : SourceResult</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources.SourceResult$NOT_PRESENT : SourceResult</ID>
    <ID>UndocumentedPublicClass:DepthFinding.kt$DepthFinding : FindingComparable</ID>
    <ID>UndocumentedPublicClass:DepthLogFactory.kt$DepthLogFactory</ID>
    <ID>UndocumentedPublicClass:DepthReportFactory.kt$DepthReportFactory</ID>
    <ID>UndocumentedPublicClass:DepthRule.kt$DepthRule : DocumentedRuleReportOnlyRule</ID>
    <ID>UndocumentedPublicClass:Depths.kt$Depths : Element</ID>
    <ID>UndocumentedPublicClass:Depths.kt$Depths$Key : Key</ID>
    <ID>UndocumentedPublicClass:Depths.kt$ProjectDepth : Comparable</ID>
    <ID>UndocumentedPublicClass:DisableAndroidResourcesRule.kt$DisableAndroidResourcesRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:DisableViewBindingGenerationFinding.kt$DisableViewBindingGenerationFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:DisableViewBindingRule.kt$DisableViewBindingRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:DocumentedRule.kt$DocumentedRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:DownstreamDependency.kt$DownstreamDependency</ID>
    <ID>UndocumentedPublicClass:DownstreamProjects.kt$DownstreamProjects : SetElement</ID>
    <ID>UndocumentedPublicClass:DownstreamProjects.kt$DownstreamProjects$Key : Key</ID>
    <ID>UndocumentedPublicClass:ExternalDependencies.kt$ExternalDependencies : MutableMap</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency : ConfiguredDependencyHasMavenCoordinates</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency$ExternalCodeGeneratorDependency : ExternalDependencyMightHaveCodeGeneratorBinding</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency$ExternalRuntimeDependency : ExternalDependency</ID>
    <ID>UndocumentedPublicClass:ExternalDependencyDeclarationVisitor.kt$ExternalDependencyDeclarationVisitor</ID>
    <ID>UndocumentedPublicClass:FancyShould.kt$FancyShould</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ConfiguredDependencyFinding : ConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$DependencyFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding$FindingResult</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding$Position : Comparable</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ProjectDependencyFinding : ConfiguredDependencyFindingConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:FindingFactory.kt$FindingFactory&lt;T : Finding></ID>
    <ID>UndocumentedPublicClass:FindingFactory.kt$RuleFilter</ID>
    <ID>UndocumentedPublicClass:FindingName.kt$FindingName</ID>
    <ID>UndocumentedPublicClass:FindingResultFactory.kt$FindingResultFactory</ID>
    <ID>UndocumentedPublicClass:Fixable.kt$Fixable : FindingProblem</ID>
    <ID>UndocumentedPublicClass:Fixable.kt$ModifiesProjectDependency : RemovesDependencyAddsDependency</ID>
    <ID>UndocumentedPublicClass:FqNames.kt$FqNames</ID>
    <ID>UndocumentedPublicClass:GradleMcLogger.kt$GradleMcLogger : McLogger</ID>
    <ID>UndocumentedPublicClass:GradleProjectProvider.kt$GradleProjectProvider : ProjectProviderAllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:GraphvizFactory.kt$GraphvizFactory</ID>
    <ID>UndocumentedPublicClass:GraphvizFactory.kt$GraphvizFactory$Color</ID>
    <ID>UndocumentedPublicClass:GraphvizFileWriter.kt$GraphvizFileWriter</ID>
    <ID>UndocumentedPublicClass:GroovyAndroidGradleParser.kt$GroovyAndroidGradleParser : AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:GroovyDependenciesBlock.kt$GroovyDependenciesBlock : AbstractDependenciesBlock</ID>
    <ID>UndocumentedPublicClass:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser</ID>
    <ID>UndocumentedPublicClass:GroovyPluginsBlock.kt$GroovyPluginsBlock : AbstractPluginsBlock</ID>
    <ID>UndocumentedPublicClass:GroovyPluginsBlockParser.kt$GroovyPluginsBlockParser</ID>
    <ID>UndocumentedPublicClass:HasConfigurations.kt$HasConfigurations</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasMavenCoordinates : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasPath : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasProjectCache.kt$HasProjectCache</ID>
    <ID>UndocumentedPublicClass:HasSuppressions.kt$HasSuppressions&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:Imports.kt$Imports : Element</ID>
    <ID>UndocumentedPublicClass:Imports.kt$Imports$Key : Key</ID>
    <ID>UndocumentedPublicClass:InheritedDependencyFinding.kt$InheritedDependencyFinding : AbstractProjectDependencyFindingAddsDependencyComparable</ID>
    <ID>UndocumentedPublicClass:InheritedDependencyRule.kt$InheritedDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:InterpretingInterceptor.kt$InterpretingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$HasBuildFile</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$HasDependencyDeclarations : HasBuildFileHasConfigurations</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$InvokesConfigurationNames : PluginAwareHasBuildFileHasConfigurationsHasDependencyDeclarations</ID>
    <ID>UndocumentedPublicClass:JavaParserNodeResolver.kt$JavaParserNodeResolver</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$JavaFile : JvmFile</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$JavaVersion</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$JvmFile : HasReferences</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$KotlinFile : JvmFile</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$KotlinFile$ScopeArgumentParseResult</ID>
    <ID>UndocumentedPublicClass:JvmFileProvider.kt$JvmFileProvider</ID>
    <ID>UndocumentedPublicClass:JvmFileProvider.kt$JvmFileProvider$Factory</ID>
    <ID>UndocumentedPublicClass:JvmFiles.kt$JvmFiles : Element</ID>
    <ID>UndocumentedPublicClass:JvmFiles.kt$JvmFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:JvmPlatformPluginFactory.kt$JvmPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:JvmSourceFiles.kt$JvmSourceFiles : Element</ID>
    <ID>UndocumentedPublicClass:JvmSourceFiles.kt$JvmSourceFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:JvmSourceSetsParser.kt$JvmSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:KaptDependencies.kt$KaptDependencies : Element</ID>
    <ID>UndocumentedPublicClass:KaptDependencies.kt$KaptDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:KaptMatcher.kt$KaptMatcher</ID>
    <ID>UndocumentedPublicClass:KotlinAndroidGradleParser.kt$KotlinAndroidGradleParser : AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:KotlinDependenciesBlock.kt$KotlinDependenciesBlock : AbstractDependenciesBlock</ID>
    <ID>UndocumentedPublicClass:KotlinDependenciesBlockParser.kt$KotlinDependenciesBlockParser</ID>
    <ID>UndocumentedPublicClass:KotlinPluginsBlock.kt$KotlinPluginsBlock : AbstractPluginsBlock</ID>
    <ID>UndocumentedPublicClass:KotlinPluginsBlockParser.kt$KotlinPluginsBlockParser</ID>
    <ID>UndocumentedPublicClass:KspListener.kt$KspListener</ID>
    <ID>UndocumentedPublicClass:LayoutFiles.kt$LayoutFiles : Element</ID>
    <ID>UndocumentedPublicClass:LayoutFiles.kt$LayoutFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:LazyDeferred.kt$LazyDeferred&lt;T></ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet$DataSource&lt;out E> : ComparableLazySetComponent</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet$State&lt;out E></ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet.DataSource$Priority : Comparable</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet&lt;out E> : FlowLazySetComponent</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySetComponent&lt;out E></ID>
    <ID>UndocumentedPublicClass:ManifestFiles.kt$ManifestFiles : Element</ID>
    <ID>UndocumentedPublicClass:ManifestFiles.kt$ManifestFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:MavenCoordinates.kt$Identifier</ID>
    <ID>UndocumentedPublicClass:MavenCoordinates.kt$MavenCoordinates : IdentifierComparable</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$McLogger</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report$ReportBuilder</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report$ReportEntry</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$AppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$Failure : ReportEntry</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$FailureHeader : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$FailureLine : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$Header : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$Info : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$Success : ReportEntry</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$SuccessHeader : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$SuccessLine : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$Warning : ReportEntry</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$WarningLine : ReportEntryAppendNewLine</ID>
    <ID>UndocumentedPublicClass:McProject.kt$McProject : ProjectContextComparableHasPathHasProjectCacheHasBuildFileHasConfigurationsHasDependencyDeclarationsInvokesConfigurationNamesPluginAware</ID>
    <ID>UndocumentedPublicClass:ModuleCheckBuildExtension.kt$ModuleCheckBuildExtension</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ChecksExtension : ChecksSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ModuleCheckExtension : ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$PerModuleReportExtension : PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ReportExtension : ReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ReportsExtension : ReportsSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$SortExtension : SortSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckPlugin.kt$ModuleCheckPlugin : Plugin</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$AllRules</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$ModuleCheckRule&lt;T : Finding></ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$ReportOnlyRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$SortRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRunner.kt$ModuleCheckRunner$Factory</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRunner.kt$ModuleCheckRunner$TimedResults&lt;R></ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ChecksSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ReportsSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$SortSettings</ID>
    <ID>UndocumentedPublicClass:MultiRuleFindingFactory.kt$FindingFactoryModule</ID>
    <ID>UndocumentedPublicClass:MultiRuleFindingFactory.kt$MultiRuleFindingFactory : FindingFactory</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$InheritedDependencyWithSource</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$MustBeApi : SetElement</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$MustBeApi$Key : Key</ID>
    <ID>UndocumentedPublicClass:MustBeApiFinding.kt$MustBeApiFinding : AbstractProjectDependencyFindingModifiesProjectDependencyAddsDependencyRemovesDependency</ID>
    <ID>UndocumentedPublicClass:MustBeApiRule.kt$MustBeApiRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$NameParser</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$NameParser$NameParserPacket</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingChain : Chain</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingChain$Factory : NameParser</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingInterceptor$Chain</ID>
    <ID>UndocumentedPublicClass:OverShotDependencies.kt$OverShotDependencies : Element</ID>
    <ID>UndocumentedPublicClass:OverShotDependencies.kt$OverShotDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:OverShotDependencyFinding.kt$OverShotDependencyFinding : AbstractProjectDependencyFindingAddsDependency</ID>
    <ID>UndocumentedPublicClass:OverShotDependencyRule.kt$OverShotDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin : PlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidApplicationPlugin : PlatformPluginAndroidPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidDynamicFeaturePlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidLibraryPlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidResourcesCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidTestPlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$CanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$CanDisableAndroidResources</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin : PlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin$JavaLibraryPlugin : JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin$KotlinJvmPlugin : JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PluginAware.kt$PluginAware</ID>
    <ID>UndocumentedPublicClass:PluginDeclaration.kt$PluginDeclaration : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlock : BlockHasSuppressedChildren</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlockProvider$Factory</ID>
    <ID>UndocumentedPublicClass:PrintLogger.kt$PrintLogger : McLogger</ID>
    <ID>UndocumentedPublicClass:Problem.kt$Problem : FindingDependencyFinding</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor$StringProjectAccessor : ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor$TypeSafeProjectAccessor : ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectCache.kt$ProjectCache</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext$Element</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext$Key&lt;E : Element></ID>
    <ID>UndocumentedPublicClass:ProjectDependencies.kt$ProjectDependencies : MutableMap</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath : IdentifierComparable</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath$StringProjectPath : ProjectPath</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath$TypeSafeProjectPath : ProjectPath</ID>
    <ID>UndocumentedPublicClass:ProjectProvider.kt$ProjectProvider : HasProjectCacheAllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:ProjectProvider.kt$ProjectRoot</ID>
    <ID>UndocumentedPublicClass:PsiElementResolver.kt$PsiElementResolver</ID>
    <ID>UndocumentedPublicClass:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText</ID>
    <ID>UndocumentedPublicClass:PublicDependencies.kt$PublicDependencies : SetElement</ID>
    <ID>UndocumentedPublicClass:PublicDependencies.kt$PublicDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:RealAllProjectPathsProvider.kt$RealAllProjectPathsProvider : AllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidDataBindingNameProvider.kt$RealAndroidDataBindingNameProvider : AndroidDataBindingNameProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidGradleSettingsProvider.kt$RealAndroidGradleSettingsProvider : AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidGradleSettingsProvider.kt$RealAndroidGradleSettingsProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory : AndroidPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory$Type&lt;T : AndroidCommonExtension></ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Application : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$DynamicFeature : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Library : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Test : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidRNameProvider.kt$RealAndroidRNameProvider : AndroidRNameProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidSourceSetsParser.kt$RealAndroidSourceSetsParser$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealBuildFileParser.kt$RealBuildFileParser : BuildFileParser</ID>
    <ID>UndocumentedPublicClass:RealBuildFileParser.kt$RealBuildFileParser$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealConfigurationsFactory.kt$RealConfigurationsFactory : ConfigurationsFactory</ID>
    <ID>UndocumentedPublicClass:RealDependenciesBlocksProvider.kt$RealDependenciesBlocksProvider : DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:RealDependenciesBlocksProvider.kt$RealDependenciesBlocksProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealDocsWebsiteUrlProvider : DocsWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealModuleCheckVersionProvider : ModuleCheckVersionProvider</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealSourceWebsiteUrlProvider : SourceWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:RealFindingResultFactory.kt$RealFindingResultFactory : FindingResultFactory</ID>
    <ID>UndocumentedPublicClass:RealJavaFile.kt$RealJavaFile : JavaFile</ID>
    <ID>UndocumentedPublicClass:RealJvmFileProvider.kt$FileCache : SafeCache</ID>
    <ID>UndocumentedPublicClass:RealJvmFileProvider.kt$RealJvmFileProvider : JvmFileProvider</ID>
    <ID>UndocumentedPublicClass:RealJvmFileProvider.kt$RealJvmFileProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealJvmSourceSetsParser.kt$RealJvmSourceSetsParser : JvmSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:RealKotlinFile.kt$RealKotlinFile : KotlinFile</ID>
    <ID>UndocumentedPublicClass:RealMcProject.kt$RealMcProject : McProject</ID>
    <ID>UndocumentedPublicClass:RealPluginsBlockProvider.kt$RealPluginsBlockProvider : PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:RealPluginsBlockProvider.kt$RealPluginsBlockProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RedundantDependencies.kt$RedundantDependencies : Element</ID>
    <ID>UndocumentedPublicClass:RedundantDependencies.kt$RedundantDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:RedundantDependencyFinding.kt$RedundantDependency</ID>
    <ID>UndocumentedPublicClass:RedundantDependencyFinding.kt$RedundantDependencyFinding : AbstractProjectDependencyFindingRemovesDependencyDeletable</ID>
    <ID>UndocumentedPublicClass:RedundantRule.kt$RedundantRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:Reference.kt$HasReferences</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference : NamedSymbol</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$AgnosticReference : Reference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$ExplicitJavaReference : ReferenceExplicitReferenceJavaReference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$ExplicitKotlinReference : ReferenceExplicitReferenceKotlinReference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$ExplicitReference : Reference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$ExplicitXmlReference : ReferenceExplicitReferenceXmlReference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$InterpretedJavaReference : ReferenceInterpretedReferenceJavaReference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$InterpretedKotlinReference : ReferenceInterpretedReferenceKotlinReference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$InterpretedReference : Reference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$JavaReference : Reference</ID>
    <ID>UndocumentedPublicClass:Reference.kt$Reference$KotlinReference : Reference</ID>
    <ID>UndocumentedPublicClass:ReferenceVisitor.kt$ReferenceVisitor : KtTreeVisitorVoid</ID>
    <ID>UndocumentedPublicClass:References.kt$References : Element</ID>
    <ID>UndocumentedPublicClass:References.kt$References$Key : Key</ID>
    <ID>UndocumentedPublicClass:RemovesDependency.kt$RemovesDependency : Fixable</ID>
    <ID>UndocumentedPublicClass:RemovesDependency.kt$RemovesDependency$RemovalStrategy</ID>
    <ID>UndocumentedPublicClass:ReportFactory.kt$ReportFactory</ID>
    <ID>UndocumentedPublicClass:ResSourceFiles.kt$ResSourceFiles : Element</ID>
    <ID>UndocumentedPublicClass:ResSourceFiles.kt$ResSourceFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$McProjectWithSourceSetName</ID>
    <ID>UndocumentedPublicClass:RulesComponent.kt$RulesComponent</ID>
    <ID>UndocumentedPublicClass:RunnerComponent.kt$RunnerComponent</ID>
    <ID>UndocumentedPublicClass:SafeXmlParser.kt$SafeXmlParser</ID>
    <ID>UndocumentedPublicClass:SarifReport.kt$Content</ID>
    <ID>UndocumentedPublicClass:SarifReport.kt$Role</ID>
    <ID>UndocumentedPublicClass:SarifReportFactory.kt$SarifReportFactory</ID>
    <ID>UndocumentedPublicClass:SortDependenciesFinding.kt$SortDependenciesFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:SortDependenciesRule.kt$SortDependenciesRule : DocumentedRuleSortRule</ID>
    <ID>UndocumentedPublicClass:SortPluginsFinding.kt$SortPluginsFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:SortPluginsRule.kt$SortPluginsRule : DocumentedRuleSortRule</ID>
    <ID>UndocumentedPublicClass:SourceSet.kt$SourceSet : Comparable</ID>
    <ID>UndocumentedPublicClass:SourceSet.kt$SourceSetName</ID>
    <ID>UndocumentedPublicClass:SourceSet.kt$SourceSets : Map</ID>
    <ID>UndocumentedPublicClass:SourceSetDependencies.kt$SourceSetDependencies : Element</ID>
    <ID>UndocumentedPublicClass:SourceSetDependencies.kt$SourceSetDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency$SourceSetExternalDependency : SourceSetDependencyHasMavenCoordinates</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency$SourceSetProjectDependency : SourceSetDependencyHasPath</ID>
    <ID>UndocumentedPublicClass:SourceSetsFactory.kt$SourceSetsFactory</ID>
    <ID>UndocumentedPublicClass:Suppressions.kt$Suppressions</ID>
    <ID>UndocumentedPublicClass:TaskComponent.kt$TaskComponent : RunnerComponentRulesComponent</ID>
    <ID>UndocumentedPublicClass:TaskComponent.kt$TaskComponent$Factory</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestChecksSettings : ChecksSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestPerModuleReportSettings : PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestReportSettings : ReportSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestReportsSettings : ReportsSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestSettings : ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestSortSettings : SortSettings</ID>
    <ID>UndocumentedPublicClass:TransitiveProjectDependency.kt$TransitiveProjectDependency</ID>
    <ID>UndocumentedPublicClass:TypeSafeProjectPathResolver.kt$AllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:UnusedDependencies.kt$UnusedDependencies : Element</ID>
    <ID>UndocumentedPublicClass:UnusedDependencies.kt$UnusedDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:UnusedDependency.kt$UnusedDependency</ID>
    <ID>UndocumentedPublicClass:UnusedDependency.kt$UnusedDependencyFinding : AbstractProjectDependencyFindingRemovesDependencyDeletable</ID>
    <ID>UndocumentedPublicClass:UnusedDependencyRule.kt$UnusedDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptPluginRule.kt$UnusedKaptPluginRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessorFinding.kt$UnusedKaptProcessorFinding : FindingProblemFixableDependencyFindingConfigurationFindingRemovesDependency</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessorRule.kt$UnusedKaptProcessorRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessors.kt$UnusedKaptProcessors : Element</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessors.kt$UnusedKaptProcessors$Key : Key</ID>
    <ID>UndocumentedPublicClass:UnusedKotlinAndroidExtensionsRule.kt$UnusedKotlinAndroidExtensionsRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedPluginFinding.kt$UnusedPluginFinding : FindingProblemFixableDeletable</ID>
    <ID>UndocumentedPublicClass:UnusedResourcesGenerationFinding.kt$UnusedResourcesGenerationFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile : HasReferences</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile$LayoutFile : XmlFile</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile$ManifestFile : XmlFile</ID>
    <ID>UndocumentedPublicClass:lazy.kt$LazyResets&lt;out T : Any> : LazyResets</ID>
    <ID>UndocumentedPublicClass:lazy.kt$ResetManager</ID>
    <ID>UndocumentedPublicClass:lazy.kt$Resets</ID>
    <ID>UndocumentedPublicClass:string.kt$IndentScope</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$fun addNonModuleStatement( configName: ConfigurationName, parsedString: String, coordinates: MavenCoordinates, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$fun addUnknownStatement( configName: ConfigurationName, parsedString: String, argument: String, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$DependenciesBlocksProvider$suspend fun get(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$DependenciesBlocksProvider.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicFunction:AbstractModuleCheckTask.kt$AbstractModuleCheckTask$@TaskAction fun run()</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$AbstractPluginsBlock$fun addStatement( parsedString: String, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$PluginsBlockProvider$fun get(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$PluginsBlockProvider.Factory$fun create(buildFile: File): PluginsBlockProvider</ID>
    <ID>UndocumentedPublicFunction:AbstractProjectDependencyFinding.kt$AbstractProjectDependencyFinding$abstract fun fromStringOrEmpty(): String</ID>
    <ID>UndocumentedPublicFunction:AddsDependency.kt$AddsDependency$suspend fun addDependency(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$AndroidBasePackages$suspend fun get(sourceSetName: SourceSetName): String?</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$suspend fun ProjectContext.androidBasePackages(): AndroidBasePackages</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$suspend fun ProjectContext.androidBasePackagesForSourceSetName( sourceSetName: SourceSetName ): String?</ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$suspend fun ProjectContext.androidDataBindingDeclarations(): AndroidDataBindingDeclarations</ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$suspend fun ProjectContext.androidDataBindingDeclarationsForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingNameProvider.kt$AndroidDataBindingNameProvider$suspend fun get(): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleParser$fun parse(buildFile: File): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleSettingsProvider$fun get(): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleSettingsProvider.Factory$fun create(buildFile: File): AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicFunction:AndroidLayoutParser.kt$AndroidLayoutParser$fun parseResources(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidLayoutParser.kt$AndroidLayoutParser$fun parseViews(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidManifestParser.kt$AndroidManifestParser$fun parse(file: File): Map&lt;String, String></ID>
    <ID>UndocumentedPublicFunction:AndroidManifestParser.kt$AndroidManifestParser$fun parseResources(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$suspend fun all(): Set&lt;AndroidRDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$suspend fun get(sourceSetName: SourceSetName): AndroidRDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$suspend fun ProjectContext.androidRDeclaredNameForSourceSetName( sourceSetName: SourceSetName ): AndroidRDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$suspend fun ProjectContext.androidRDeclaredNames()</ID>
    <ID>UndocumentedPublicFunction:AndroidRNameProvider.kt$AndroidRNameProvider$suspend fun getAll(): LazySet&lt;AndroidRDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidRNameProvider.kt$AndroidRNameProvider$suspend fun getLocalOrNull(): AndroidRDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$fun toNamespacedDeclaredName( androidRDeclaration: AndroidRDeclaredName ): GeneratedAndroidResourceDeclaredName</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName.Companion$fun fromFile(file: File): UnqualifiedAndroidResourceDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName.Companion$fun fromString(str: String): UnqualifiedAndroidResourceDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName.Companion$fun fromValuePair(type: String, name: String): UnqualifiedAndroidResourceDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName.Companion$fun prefixes()</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames$suspend fun all(): LazySet&lt;AndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;AndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredNames.kt$suspend fun ProjectContext.androidResourceDeclaredNames(): AndroidResourceDeclaredNames</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredNames.kt$suspend fun ProjectContext.androidResourceDeclaredNamesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;AndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceParser.kt$AndroidResourceParser$fun parseFile(resDir: File): Set&lt;UnqualifiedAndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceReferences.kt$AndroidResourceReferences$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceReferences.kt$suspend fun ProjectContext.androidResourceReferencesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:AndroidSourceSetsParser.kt$AndroidSourceSetsParser$fun parse(): SourceSets</ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$AndroidStylesFiles$suspend fun all(): Map&lt;SourceSetName, Set&lt;AndroidStylesFile>></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$AndroidStylesFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;AndroidStylesFile></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$suspend fun ProjectContext.androidStylesFiles(): AndroidStylesFiles</ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$suspend fun ProjectContext.androidStylesFilesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;AndroidStylesFile></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesParser.kt$AndroidStylesParser$fun parseFile(file: File): Set&lt;UnqualifiedAndroidResourceReference></ID>
    <ID>UndocumentedPublicFunction:AndroidUnqualifiedDeclarationNames.kt$AndroidUnqualifiedDeclarationNames$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;UnqualifiedAndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidUnqualifiedDeclarationNames.kt$suspend fun ProjectContext.androidUnqualifiedDeclarationNames(): AndroidUnqualifiedDeclarationNames</ID>
    <ID>UndocumentedPublicFunction:AndroidUnqualifiedDeclarationNames.kt$suspend fun ProjectContext.androidUnqualifiedDeclarationNamesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;UnqualifiedAndroidResourceDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AnvilFactoryRule.kt$AnvilFactoryRule$@Suppress("ComplexMethod") suspend fun parse(findingName: FindingName, project: McProject): List&lt;CouldUseAnvilFinding></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun all(): List&lt;Map&lt;AnvilScopeName, AnvilScopedDeclarations>></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun get( sourceSetName: SourceSetName ): Map&lt;AnvilScopeName, AnvilScopedDeclarations></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun mergedScopeNames(): List&lt;AnvilScopeName></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$suspend fun ProjectContext.anvilGraph(): AnvilGraph</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeContributions.kt$AnvilScopeContributions$suspend fun get(sourceSetName: SourceSetName): Map&lt;AnvilScopeName, Set&lt;DeclaredName>></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeContributions.kt$suspend fun ProjectContext.anvilScopeContributions(): AnvilScopeContributions</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeContributions.kt$suspend fun ProjectContext.anvilScopeContributionsForSourceSetName( sourceSetName: SourceSetName ): Map&lt;AnvilScopeName, Set&lt;DeclaredName>></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$AnvilScopeDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$suspend fun ProjectContext.anvilScopeDependencies(): AnvilScopeDependencies</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$suspend fun ProjectContext.anvilScopeDependenciesForSourceSetName( sourceSetName: SourceSetName ): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeMerges.kt$AnvilScopeMerges$suspend fun all(): List&lt;Map&lt;AnvilScopeName, Set&lt;DeclaredName>>></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeMerges.kt$AnvilScopeMerges$suspend fun get(sourceSetName: SourceSetName): Map&lt;AnvilScopeName, Set&lt;DeclaredName>></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeMerges.kt$suspend fun ProjectContext.anvilScopeMerges(): AnvilScopeMerges</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeMerges.kt$suspend fun ProjectContext.anvilScopeMergesForSourceSetName( sourceSetName: SourceSetName ): Map&lt;AnvilScopeName, Set&lt;DeclaredName>></ID>
    <ID>UndocumentedPublicFunction:AppScope.kt$DocsWebsiteUrlProvider$fun get(): String</ID>
    <ID>UndocumentedPublicFunction:AppScope.kt$ModuleCheckVersionProvider$fun get(): String</ID>
    <ID>UndocumentedPublicFunction:AppScope.kt$SourceWebsiteUrlProvider$fun get(): String</ID>
    <ID>UndocumentedPublicFunction:ArtifactIdListener.kt$ArtifactIdListener$fun onChanged(artifactId: String)</ID>
    <ID>UndocumentedPublicFunction:ArtifactsCheckTask.kt$ArtifactsCheckTask$@TaskAction fun run()</ID>
    <ID>UndocumentedPublicFunction:ArtifactsDumpTask.kt$ArtifactsDumpTask$@TaskAction fun run()</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun File.relativePath()</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun String.clean(): String</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun test(action: suspend CoroutineScope.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:BindingContext.kt$/* Borrowed from Detekt https://github.com/detekt/detekt/blob/master/detekt-parser/src/main/kotlin/io/github/detekt/parser/KotlinEnvironmentUtils.kt */ fun createKotlinCoreEnvironment( configuration: CompilerConfiguration = CompilerConfiguration(), disposable: Disposable = Disposer.newDisposable() ): KotlinCoreEnvironment</ID>
    <ID>UndocumentedPublicFunction:BindingContext.kt$fun createBindingContext( classpath: List&lt;String>, files: List&lt;KtFile> ): BindingContext</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun androidSettings(): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun dependenciesBlocks(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun pluginsBlock(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): BuildFileParser</ID>
    <ID>UndocumentedPublicFunction:CaseMatcher.kt$CaseMatcher$open fun matches(source: String?): Boolean</ID>
    <ID>UndocumentedPublicFunction:CheckstyleReporter.kt$CheckstyleReporter$fun createXml(results: List&lt;FindingResult>): String</ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$ClasspathDependencies$suspend fun all(): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$ClasspathDependencies$suspend fun get(key: SourceSetName): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$suspend fun ProjectContext.classpathDependencies(): ClasspathDependencies</ID>
    <ID>UndocumentedPublicFunction:CodeGeneratorBinding.kt$fun List&lt;CodeGeneratorBinding>.asMap(): Map&lt;String, CodeGeneratorBinding></ID>
    <ID>UndocumentedPublicFunction:Config.kt$Config$fun withDownstream(): List&lt;Config></ID>
    <ID>UndocumentedPublicFunction:Config.kt$Config$fun withUpstream(): List&lt;Config></ID>
    <ID>UndocumentedPublicFunction:Config.kt$ConfigurationName$fun toSourceSetName(): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:Config.kt$ConfigurationName.Companion$fun main()</ID>
    <ID>UndocumentedPublicFunction:Config.kt$ConfigurationName.Companion$fun private()</ID>
    <ID>UndocumentedPublicFunction:Config.kt$ConfigurationName.Companion$fun public()</ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun &lt;K : Any, T : Any> Map&lt;K, Collection&lt;T>>.all(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun &lt;T : Any> Map&lt;ConfigurationName, Collection&lt;T>>.main(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun Iterable&lt;Config>.names(): List&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun Iterable&lt;ConfigurationName>.distinctSourceSetNames(): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun Sequence&lt;Config>.names(): Sequence&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun Sequence&lt;ConfigurationName>.distinctSourceSetNames(): Sequence&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:Config.kt$fun String.asConfigurationName(): ConfigurationName</ID>
    <ID>UndocumentedPublicFunction:ConfigFactory.kt$ConfigFactory$fun create(t: T): Config</ID>
    <ID>UndocumentedPublicFunction:ConfigurationsFactory.kt$ConfigurationsFactory$fun create(gradleProject: GradleProject): Configurations</ID>
    <ID>UndocumentedPublicFunction:ConfiguredDependency.kt$ConfiguredDependency.Companion$inline fun &lt;reified T : ConfiguredDependency> T.copy( configurationName: ConfigurationName = this.configurationName, isTestFixture: Boolean = this.isTestFixture ): ConfiguredDependency</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideCoroutineScope(): CoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideDefaultCoroutineScope(): DefaultCoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideIOCoroutineScope(): IOCoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideMainCoroutineScope(): MainCoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideMainImmediateCoroutineScope(): MainImmediateCoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@Provides fun provideUnconfinedCoroutineScope(): UnconfinedCoroutineScope</ID>
    <ID>UndocumentedPublicFunction:CoroutineScopeModule.kt$CoroutineScopeModule$@SingleIn(AppScope::class) @Provides fun provideDispatcherProvider(): DispatcherProvider</ID>
    <ID>UndocumentedPublicFunction:DIListener.kt$DIListener$fun onChanged(anvil: Boolean, dagger: Boolean)</ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$Declarations$suspend fun all(): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$Declarations$suspend fun get( sourceSetName: SourceSetName, includeUpstream: Boolean ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$suspend fun ProjectContext.declarations(): Declarations</ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$suspend fun ProjectDependency.declarations( projectCache: ProjectCache ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$@JvmName("containsDeclaredName") fun Set&lt;DeclaredName>.containsAny(names: Set&lt;String>): Boolean</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$DeclaredName.Companion$operator fun invoke(fqName: String)</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$fun FqName.asDeclaredName(): DeclaredName</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$fun String.asAndroidRDeclaration(): AndroidRDeclaredName</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$fun String.asDeclaredName(): DeclaredName</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$fun String.asJavaDeclaredName(): DeclaredName</ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$fun String.asKotlinDeclaredName(): DeclaredName</ID>
    <ID>UndocumentedPublicFunction:Deletable.kt$Deletable$suspend fun delete(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( mavenCoordinates: MavenCoordinates, configName: ConfigurationName ): List&lt;ExternalDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( moduleRef: ProjectPath, configName: ConfigurationName, testFixtures: Boolean ): List&lt;ModuleDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( moduleRef: String, configName: ConfigurationName, testFixtures: Boolean ): List&lt;ModuleDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlocksProvider$suspend fun get(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlocksProvider.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$DependencyDeclaration.ConfigurationNameTransform$suspend operator fun invoke(configurationName: ConfigurationName): String</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$ExternalDependencyDeclaration$suspend fun copy( newConfigName: ConfigurationName = configName, newCoordinates: MavenCoordinates = coordinates, testFixtures: Boolean ): ExternalDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$ModuleDependencyDeclaration$suspend fun copy( newConfigName: ConfigurationName = configName, newModulePath: ProjectPath = projectPath, testFixtures: Boolean ): ModuleDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$DependencySources$suspend fun sourceOfOrNull( dependencyProjectPath: ProjectPath, sourceSetName: SourceSetName, isTestFixture: Boolean ): ProjectDependency?</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$suspend fun McProject.requireSourceOf( dependencyProject: McProject, sourceSetName: SourceSetName, isTestFixture: Boolean ): ProjectDependency</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$suspend fun ProjectContext.dependencySources(): DependencySources</ID>
    <ID>UndocumentedPublicFunction:DepthFinding.kt$DepthFinding$fun toProjectDepth(): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:DepthLogFactory.kt$DepthLogFactory$fun create(results: List&lt;DepthFinding>): Report</ID>
    <ID>UndocumentedPublicFunction:DepthReportFactory.kt$DepthReportFactory$fun create(results: List&lt;DepthFinding>): Report</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$Depths$suspend fun get(key: SourceSetName): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$ProjectDepth$fun toFinding(name: FindingName): DepthFinding</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$ProjectDepth$suspend fun fullTree(sourceSetName: SourceSetName = this.sourceSetName): Set&lt;ProjectDepth></ID>
    <ID>UndocumentedPublicFunction:Depths.kt$suspend fun McProject.depthForSourceSetName(sourceSetName: SourceSetName): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$suspend fun McProject.depths(): Depths</ID>
    <ID>UndocumentedPublicFunction:DynamicTests.kt$DynamicTests$fun &lt;T : Any> Iterable&lt;() -> T>.dynamic( testName: String, test: (T) -> Unit ): List&lt;DynamicTest></ID>
    <ID>UndocumentedPublicFunction:DynamicTests.kt$DynamicTests$fun &lt;T : Any> Iterable&lt;T>.dynamic( testName: (T) -> String, test: (T) -> Unit ): List&lt;DynamicTest></ID>
    <ID>UndocumentedPublicFunction:DynamicTests.kt$DynamicTests$fun &lt;T : Any> Sequence&lt;T>.dynamic( testName: (T) -> String, test: (T) -> Unit ): List&lt;DynamicTest></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun add(dependency: ExternalDependency)</ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun main(): List&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun private(): List&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun public(): List&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun remove(dependency: ExternalDependency)</ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$operator fun get(sourceSetName: SourceSetName): List&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencyDeclarationVisitor.kt$ExternalDependencyDeclarationVisitor$@Suppress("ReturnCount", "MaxLineLength") fun find(expression: KtCallExpression): Boolean</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun &lt;T, U : T> T.shouldBe(expected: U?)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun File.shouldHaveText(expected: String)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun String.shouldBe(expected: String)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$fun &lt;T, U : T> T.trimmedShouldBe(expected: U?, vararg excludeFromStack: KClass&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$fun &lt;T> T.trimmedAssert( vararg excludeFromStack: KClass&lt;*>, assertion: suspend T.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:Finding.kt$Finding$suspend fun toResult(fixed: Boolean): FindingResult</ID>
    <ID>UndocumentedPublicFunction:Finding.kt$Finding.Position$fun logString(): String</ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateFixable(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateReports(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateSorts(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$RuleFilter$fun shouldEvaluate(rule: ModuleCheckRule&lt;*>, settings: ModuleCheckSettings): Boolean</ID>
    <ID>UndocumentedPublicFunction:FindingName.kt$FindingName.Companion$@Deprecated("This will be removed soon.") fun migrateLegacyIdOrNull(legacyID: String, logger: McLogger): String?</ID>
    <ID>UndocumentedPublicFunction:FindingResultFactory.kt$FindingResultFactory$suspend fun create( findings: List&lt;Finding>, autoCorrect: Boolean, deleteUnused: Boolean ): List&lt;FindingResult></ID>
    <ID>UndocumentedPublicFunction:Fixable.kt$Fixable$fun fixLabel()</ID>
    <ID>UndocumentedPublicFunction:Fixable.kt$Fixable$suspend fun fix(removalStrategy: RemovalStrategy): Boolean</ID>
    <ID>UndocumentedPublicFunction:GraphvizFactory.kt$GraphvizFactory$suspend fun create(root: ProjectDepth): String</ID>
    <ID>UndocumentedPublicFunction:GraphvizFileWriter.kt$GraphvizFileWriter$suspend fun write(depths: List&lt;ProjectDepth>)</ID>
    <ID>UndocumentedPublicFunction:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser$fun parse(file: File): List&lt;GroovyDependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:GroovyPluginsBlockParser.kt$GroovyPluginsBlockParser$fun parse(file: File): GroovyPluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:HasProjectCache.kt$HasProjectCache$fun HasPath.project(): McProject</ID>
    <ID>UndocumentedPublicFunction:Imports.kt$Imports$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:Imports.kt$suspend fun ProjectContext.imports(): Imports</ID>
    <ID>UndocumentedPublicFunction:Imports.kt$suspend fun ProjectContext.importsForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:InvokesConfigurationNames.kt$HasDependencyDeclarations$suspend fun getConfigurationInvocations(): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:JavaParserNodeResolver.kt$JavaParserNodeResolver$suspend fun fqNameOrNull( node: ClassOrInterfaceType, packageName: String, directImports: Collection&lt;String>, wildcardImports: Collection&lt;String> ): FqName?</ID>
    <ID>UndocumentedPublicFunction:JvmFileProvider.kt$JvmFileProvider$suspend fun getOrNull(file: File): JvmFile?</ID>
    <ID>UndocumentedPublicFunction:JvmFileProvider.kt$JvmFileProvider.Factory$fun create(project: McProject, sourceSetName: SourceSetName): JvmFileProvider</ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$JvmFiles$suspend fun get(sourceSetName: SourceSetName): Flow&lt;JvmFile></ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$suspend fun ProjectContext.jvmFiles(): JvmFiles</ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$suspend fun ProjectContext.jvmFilesForSourceSetName( sourceSetName: SourceSetName ): Flow&lt;JvmFile></ID>
    <ID>UndocumentedPublicFunction:JvmPlatformPluginFactory.kt$JvmPlatformPluginFactory$fun create( gradleProject: GradleProject, hasTestFixturesPlugin: Boolean ): JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicFunction:JvmPlatformPluginFactory.kt$fun GradleProject.getKotlinExtensionOrNull(): KotlinProjectExtension?</ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$JvmSourceFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$suspend fun ProjectContext.jvmSourceFiles(): JvmSourceFiles</ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$suspend fun ProjectContext.jvmSourcesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:JvmSourceSetsParser.kt$JvmSourceSetsParser$fun parse( parsedConfigurations: Configurations, gradleProject: GradleProject ): SourceSets</ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$KaptDependencies$suspend fun all(): List&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$KaptDependencies$suspend fun get(configurationName: ConfigurationName): Set&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$suspend fun ProjectContext.kaptDependencies(): KaptDependencies</ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$suspend fun ProjectContext.kaptDependenciesForConfig( configurationName: ConfigurationName ): Set&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptMatcher.kt$KaptMatcher$fun toCodeGeneratorBinding()</ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$KotlinDependenciesBlockParser$@Suppress("ReturnCount") suspend fun parse( invokesConfigurationNames: InvokesConfigurationNames ): List&lt;KotlinDependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$inline fun blockExpressionRecursiveVisitor( crossinline block: KtTreeVisitorVoid.(expression: KtBlockExpression) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$inline fun literalStringTemplateRecursiveVisitor( crossinline block: KtTreeVisitorVoid.(entry: KtLiteralStringTemplateEntry) -> Unit )</ID>
    <ID>UndocumentedPublicFunction:KotlinPluginsBlockParser.kt$KotlinPluginsBlockParser$@Suppress("ReturnCount") fun parse(file: KtFile): KotlinPluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:KspListener.kt$KspListener$fun onChanged(useKsp: Boolean)</ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$LayoutFiles$suspend fun all(): Map&lt;SourceSetName, Set&lt;LayoutFile>></ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$LayoutFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;LayoutFile></ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$suspend fun ProjectContext.layoutFiles(): LayoutFiles</ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$suspend fun ProjectContext.layoutFilesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;XmlFile.LayoutFile></ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$LazyDeferred$suspend fun await(): T</ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$fun &lt;T> (suspend () -> T).asLazyDeferred(): LazyDeferred&lt;T></ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$suspend fun &lt;T> Collection&lt;LazyDeferred&lt;T>>.awaitAll(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$@JvmName("lazySetSingle") fun &lt;E> lazySet( priority: Priority = MEDIUM, dataSource: suspend () -> E ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$fun snapshot(): State&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun contains(element: Any?): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun isNotEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet.DataSource$suspend fun get(): Set&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet.State$fun nextSources(): Sequence&lt;List&lt;DataSource&lt;E>>></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Collection&lt;LazySetComponent&lt;E>>.toLazySet(): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Lazy&lt;Set&lt;E>>.asDataSource( priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> LazyDeferred&lt;Set&lt;E>>.asDataSource( priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> dataSource( priority: Priority = MEDIUM, factory: suspend () -> Set&lt;E> ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> dataSourceOf( vararg elements: E, priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> emptyDataSource(): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> emptyLazySet(): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( children: Collection&lt;LazySetComponent&lt;E>> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( priority: Priority = MEDIUM, dataSource: suspend () -> Set&lt;E> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( vararg children: LazySetComponent&lt;E> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$suspend fun &lt;T : B, E : B, B> LazySet&lt;T>.containsAny(elements: Collection&lt;E>): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$suspend fun &lt;T : B, E : B, B> LazySet&lt;T>.containsAny(elements: LazySet&lt;E>): Boolean</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$ManifestFiles$suspend fun get(sourceSetName: SourceSetName): XmlFile.ManifestFile?</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$suspend fun ProjectContext.manifestFileForSourceSetName( sourceSetName: SourceSetName ): XmlFile.ManifestFile?</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$suspend fun ProjectContext.manifestFiles(): ManifestFiles</ID>
    <ID>UndocumentedPublicFunction:MavenCoordinates.kt$MavenCoordinates.Companion$fun parseOrNull(coordinateString: String): MavenCoordinates?</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printFailure(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printFailureHeader(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printFailureLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printHeader(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printInfo(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printReport(report: Report)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printSuccess(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printSuccessHeader(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printSuccessLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printWarning(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$McLogger$fun printWarningLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report$fun joinToString(): String</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.Companion$fun build(buildAction: ReportBuilder.() -> Unit): Report</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun failure(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun failureHeader(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun failureLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun header(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun info(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun success(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun successHeader(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun successLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun warning(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportBuilder$fun warningLine(message: String)</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportEntry$fun printToStdOut()</ID>
    <ID>UndocumentedPublicFunction:McProject.kt$McProject$suspend fun resolveFqNameOrNull( declaredName: FqName, sourceSetName: SourceSetName ): FqName?</ID>
    <ID>UndocumentedPublicFunction:McProject.kt$fun McProject.isAndroid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckExtension.kt$ModuleCheckExtension$fun checks(action: Action&lt;ChecksSettings>)</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckExtension.kt$ModuleCheckExtension$fun sort(action: Action&lt;SortExtension>)</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRule.kt$ModuleCheckRule$fun shouldApply(settings: ModuleCheckSettings): Boolean</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRule.kt$ModuleCheckRule$suspend fun check(project: McProject): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRunner.kt$ModuleCheckRunner$fun run(projects: List&lt;McProject>): Result&lt;Unit></ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRunner.kt$ModuleCheckRunner.Factory$fun create(autoCorrect: Boolean): ModuleCheckRunner</ID>
    <ID>UndocumentedPublicFunction:MultiRuleFindingFactory.kt$FindingFactoryModule$@Binds fun MultiRuleFindingFactory.bindFindingFactory(): FindingFactory&lt;out Finding></ID>
    <ID>UndocumentedPublicFunction:MustBeApi.kt$suspend fun McProject.mustBeApiIn( dependentProject: McProject, sourceSetName: SourceSetName, isTestFixtures: Boolean ): Boolean</ID>
    <ID>UndocumentedPublicFunction:MustBeApi.kt$suspend fun ProjectContext.mustBeApi(): MustBeApi</ID>
    <ID>UndocumentedPublicFunction:NameParser.kt$NameParser$suspend fun parse(packet: NameParserPacket): NameParserPacket</ID>
    <ID>UndocumentedPublicFunction:NameParser.kt$ParsingInterceptor$suspend fun intercept(chain: Chain): NameParserPacket</ID>
    <ID>UndocumentedPublicFunction:NamedSymbol.kt$NamedSymbol$fun endsWith(str: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:NamedSymbol.kt$NamedSymbol$fun endsWith(symbol: NamedSymbol): Boolean</ID>
    <ID>UndocumentedPublicFunction:NamedSymbol.kt$NamedSymbol$fun startsWith(symbol: NamedSymbol): Boolean</ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$OverShotDependencies$suspend fun all(): List&lt;OverShotDependency></ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$OverShotDependencies$suspend fun get(configurationName: ConfigurationName): List&lt;OverShotDependency></ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$suspend fun ProjectContext.overshotDependencies(): OverShotDependencies</ID>
    <ID>UndocumentedPublicFunction:PlatformPlugin.kt$PlatformPlugin$fun asAndroidOrNull(): AndroidPlatformPlugin?</ID>
    <ID>UndocumentedPublicFunction:PlatformPlugin.kt$fun PlatformPlugin.isAndroid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlock$fun getById(pluginId: String): PluginDeclaration?</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlockProvider$fun get(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlockProvider.Factory$fun create(buildFile: File): PluginsBlockProvider</ID>
    <ID>UndocumentedPublicFunction:ProjectAccessor.kt$ProjectAccessor.Companion$fun from(rawString: String, projectPath: ProjectPath): ProjectAccessor</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$fun clearContexts()</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$fun getValue(path: ProjectPath): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$operator fun set(path: ProjectPath, project: McProject): McProject?</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext$fun clearContext()</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext$suspend fun &lt;E : Element> get(key: Key&lt;E>): E</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext.Companion$operator fun invoke(project: McProject): ProjectContext</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext.Key$suspend operator fun invoke(project: McProject): E</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun add(cpd: ProjectDependency)</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun main(): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun private(): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun public(): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun remove(cpd: ProjectDependency)</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$operator fun get(sourceSetName: SourceSetName): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath$abstract fun pathValue(typeSafeProjectPathResolver: TypeSafeProjectPathResolver): String</ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath$abstract fun toTypeSafe(): TypeSafeProjectPath</ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath.Companion$fun from(rawString: String): ProjectPath</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun clearCaches()</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun get(path: ProjectPath): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun getAll(): List&lt;McProject></ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectRoot$fun get(): File</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$fun ProjectProvider.toTypeSafeProjectPathResolver(): TypeSafeProjectPathResolver</ID>
    <ID>UndocumentedPublicFunction:PsiElementResolver.kt$PsiElementResolver$suspend fun fqNameOrNull( token: PsiElement ): FqName?</ID>
    <ID>UndocumentedPublicFunction:PublicDependencies.kt$suspend fun ProjectContext.publicDependencies(): PublicDependencies</ID>
    <ID>UndocumentedPublicFunction:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type.Companion$fun from(extension: AndroidCommonExtension): Type&lt;*></ID>
    <ID>UndocumentedPublicFunction:RealAndroidSourceSetsParser.kt$RealAndroidSourceSetsParser$fun String.removeAndroidTestPrefix(): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:RealAndroidSourceSetsParser.kt$RealAndroidSourceSetsParser$fun String.removeTestFixturesPrefix(): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:RealAndroidSourceSetsParser.kt$RealAndroidSourceSetsParser$fun String.removeTestPrefix(): String</ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun &lt;T> T.canBeImported(): Boolean</ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun &lt;T> T.canBeResolved(): Boolean</ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun FieldDeclaration.apiReferences(): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun MethodDeclaration.apiReferences(): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$RedundantDependencies$suspend fun all(): List&lt;RedundantDependency></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$RedundantDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;RedundantDependency></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$suspend fun ProjectContext.redundantDependencies(): RedundantDependencies</ID>
    <ID>UndocumentedPublicFunction:RedundantDependencyFinding.kt$RedundantDependency$fun toFinding(findingName: FindingName): RedundantDependencyFinding</ID>
    <ID>UndocumentedPublicFunction:Reference.kt$fun String.asExplicitJavaReference(): ExplicitJavaReference</ID>
    <ID>UndocumentedPublicFunction:Reference.kt$fun String.asExplicitKotlinReference(): ExplicitKotlinReference</ID>
    <ID>UndocumentedPublicFunction:Reference.kt$fun String.asInterpretedJavaReference(): InterpretedJavaReference</ID>
    <ID>UndocumentedPublicFunction:Reference.kt$fun String.asInterpretedKotlinReference(): InterpretedKotlinReference</ID>
    <ID>UndocumentedPublicFunction:References.kt$References$suspend fun all(): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:References.kt$References$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:References.kt$suspend fun ProjectContext.references(): References</ID>
    <ID>UndocumentedPublicFunction:References.kt$suspend fun ProjectContext.referencesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicFunction:RemovesDependency.kt$RemovesDependency$suspend fun removeDependency(removalStrategy: RemovalStrategy): Boolean</ID>
    <ID>UndocumentedPublicFunction:ReportFactory.kt$ReportFactory$fun create(results: List&lt;Finding.FindingResult>): Report</ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$ResSourceFiles$suspend fun all(): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$ResSourceFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$suspend fun ProjectContext.resSourceFiles(): ResSourceFiles</ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$suspend fun ProjectContext.resourceFilesForSourceSetName(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$suspend fun getSource( declaredName: DeclaredName, sourceSetName: SourceSetName ): McProjectWithSourceSetName?</ID>
    <ID>UndocumentedPublicFunction:ResolvedDeclaredNames.kt$suspend fun ProjectContext.resolvedDeclaredNames(): ResolvedDeclaredNames</ID>
    <ID>UndocumentedPublicFunction:SafeXmlParser.kt$SafeXmlParser$fun parse(file: File): Node?</ID>
    <ID>UndocumentedPublicFunction:SafeXmlParser.kt$SafeXmlParser$fun parse(text: String): Node?</ID>
    <ID>UndocumentedPublicFunction:SarifReportFactory.kt$SarifReportFactory$fun create( findingResults: List&lt;Finding.FindingResult>, rules: List&lt;ModuleCheckRule&lt;*>> ): String</ID>
    <ID>UndocumentedPublicFunction:SortDependenciesFinding.kt$fun sortedDependenciesFileText( block: DependenciesBlock, fileText: String, comparator: Comparator&lt;String> ): String</ID>
    <ID>UndocumentedPublicFunction:SortPluginsFinding.kt$fun PluginsBlock.sortedPlugins( comparator: Comparator&lt;PluginDeclaration> ): String</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSet$fun withDownstream()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSet$fun withUpstream()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun apiConfig(): ConfigurationName</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun implementationConfig(): ConfigurationName</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun inheritsFrom( other: SourceSetName, hasConfigurations: HasConfigurations ): Boolean</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun isTestFixtures()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun isTestOrAndroidTest()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun isTestingOnly()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun javaConfigurationNames(): List&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun nonTestSourceSetNameOrNull()</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun withDownStream( hasConfigurations: HasConfigurations ): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$SourceSetName$fun withUpstream( hasConfigurations: HasConfigurations ): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun Collection&lt;SourceSet>.sortedByInheritance(): Sequence&lt;SourceSet></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun Iterable&lt;SourceSet>.names(): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun Sequence&lt;SourceSet>.names(): Sequence&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.addPrefix(prefix: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.addPrefix(prefix: String)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.addSuffix(suffix: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.addSuffix(suffix: String)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.hasPrefix(prefix: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.hasPrefix(prefix: String)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.removePrefix(prefix: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.removePrefix(prefix: String)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.removeSuffix(suffix: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun SourceSetName.removeSuffix(suffix: String)</ID>
    <ID>UndocumentedPublicFunction:SourceSet.kt$fun String.asSourceSetName(): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetDependencies.kt$SourceSetDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:SourceSetDependencies.kt$suspend fun ProjectContext.sourceSetDependencies(): SourceSetDependencies</ID>
    <ID>UndocumentedPublicFunction:SourceSetDependency.kt$fun ConfiguredDependency.toSourceSetDependency( sourceSetName: SourceSetName = configurationName.toSourceSetName() ): SourceSetDependency</ID>
    <ID>UndocumentedPublicFunction:SourceSetsFactory.kt$SourceSetsFactory$fun create( gradleProject: GradleProject, configurations: Configurations, hasTestFixturesPlugin: Boolean ): SourceSets</ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$Suppressions$fun get(dependency: Dependency): Set&lt;FindingName></ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$Suppressions$fun get(findingName: FindingName): Set&lt;Dependency></ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$suspend fun &lt;T> T.getSuppressions(): Suppressions</ID>
    <ID>UndocumentedPublicFunction:TaskComponent.kt$TaskComponent.Factory$fun create( @RootGradleProject @BindsInstance project: Project, @BindsInstance moduleCheckSettings: ModuleCheckSettings, @BindsInstance ruleFilter: RuleFilter, @BindsInstance projectRoot: ProjectRoot ): TaskComponent</ID>
    <ID>UndocumentedPublicFunction:TestSettings.kt$TestSettings$@Suppress("UNUSED") fun checks(block: ChecksSettings.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:TestSettings.kt$TestSettings$@Suppress("UNUSED") fun sort(block: SortSettings.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:TransitiveProjectDependency.kt$TransitiveProjectDependency$fun withContributedConfiguration( configurationName: ConfigurationName = source.configurationName ): TransitiveProjectDependency</ID>
    <ID>UndocumentedPublicFunction:TypeSafeProjectPathResolver.kt$AllProjectPathsProvider$fun getAllPaths(): List&lt;StringProjectPath></ID>
    <ID>UndocumentedPublicFunction:TypeSafeProjectPathResolver.kt$TypeSafeProjectPathResolver$fun resolveStringProjectPath(typeSafe: TypeSafeProjectPath): StringProjectPath</ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$UnusedDependencies$suspend fun all(): List&lt;UnusedDependency></ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$UnusedDependencies$suspend fun get(configurationName: ConfigurationName): Set&lt;UnusedDependency></ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$suspend fun ProjectContext.unusedDependencies(): UnusedDependencies</ID>
    <ID>UndocumentedPublicFunction:UnusedDependency.kt$UnusedDependency$fun toFinding(findingName: FindingName): UnusedDependencyFinding</ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$UnusedKaptProcessors$suspend fun all(): List&lt;UnusedKaptProcessorFinding></ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$UnusedKaptProcessors$suspend fun get( configurationName: ConfigurationName ): Set&lt;UnusedKaptProcessorFinding></ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$suspend fun ProjectContext.unusedKaptProcessors(): UnusedKaptProcessors</ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.androidBlocks(): List&lt;KtCallExpression></ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.buildFeaturesBlocks(): List&lt;KtCallExpression></ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.inBuildscript(): Boolean</ID>
    <ID>UndocumentedPublicFunction:anvil.kt$fun Project.applyAnvil(anvil: Boolean, dagger: Boolean)</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T : Any, E> T.applyEach(elements: Iterable&lt;E>, block: T.(E) -> Unit): T</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T> T.applyIf(predicate: Boolean, body: T.() -> T): T</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T> T.letIf(predicate: Boolean, body: (T) -> T): T</ID>
    <ID>UndocumentedPublicFunction:asserts.kt$fun &lt;T : Any> T?.requireNotNullOrFail( lazyMessage: () -> String = { "The receiver cannot be null, but it was. ¯\\_(ツ)_/¯" } ): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$@Suppress("NOTHING_TO_INLINE") inline fun &lt;T : Any> T?.requireNotNull(): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$@Suppress("UNCHECKED_CAST", "NOTHING_TO_INLINE") inline fun &lt;T> Any.cast(): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$inline fun &lt;T : Any> T?.requireNotNull(lazyMessage: () -> Any): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$inline fun &lt;reified T : Any> Any?.safeAs(): T?</ID>
    <ID>UndocumentedPublicFunction:catalogs.kt$@Suppress("UnstableApiUsage") fun VersionCatalog.dependency(alias: String): Provider&lt;MinimalExternalModuleDependency></ID>
    <ID>UndocumentedPublicFunction:catalogs.kt$@Suppress("UnstableApiUsage") fun VersionCatalog.version(alias: String): VersionConstraint</ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;C : Collection&lt;T>, T, R> C.mapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> R ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;T, R> Iterable&lt;T>.flatMapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> Iterable&lt;R> ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;T, R> Sequence&lt;T>.flatMapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> Iterable&lt;R> ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:comparable.kt$infix fun &lt;T> Comparable&lt;T>.isGreaterThan(other: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:coroutines.kt$fun &lt;T, R> List&lt;T>.mapBlocking(transform: suspend (T) -> R): List&lt;R></ID>
    <ID>UndocumentedPublicFunction:coroutines.kt$fun &lt;T, R> Sequence&lt;T>.flatMapBlocking(transform: suspend (T) -> Iterable&lt;R>): Sequence&lt;R></ID>
    <ID>UndocumentedPublicFunction:coroutines.kt$fun &lt;T, R> Sequence&lt;T>.mapBlocking(transform: suspend (T) -> R): Sequence&lt;R></ID>
    <ID>UndocumentedPublicFunction:coroutines.kt$fun &lt;T> Sequence&lt;T>.filterBlocking(predicate: suspend (T) -> Boolean): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:coroutines.kt$fun &lt;T> Sequence&lt;T>.filterNotBlocking(predicate: suspend (T) -> Boolean): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:dagger.kt$fun Project.applyDagger(anvil: Boolean, dagger: Boolean)</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$@Suppress("LongParameterList") fun ExternalDependencyDeclaration( configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList(), group: String?, moduleName: String, version: String?, coordinates: MavenCoordinates = MavenCoordinates(group, moduleName, version) ): ExternalDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$@Suppress("LongParameterList") fun ModuleDependencyDeclaration( projectPath: ProjectPath, projectAccessor: String, configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList() ): ModuleDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$fun UnknownDependencyDeclaration( argument: String, configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList() ): UnknownDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:defaultCodeGeneratorBindings.kt$fun defaultCodeGeneratorBindings(): List&lt;CodeGeneratorBinding></ID>
    <ID>UndocumentedPublicFunction:dependencies.kt$fun McProject.removeDependencyWithComment( statement: BuildFileStatement, fixLabel: String, configuredDependency: ConfiguredDependency? = null )</ID>
    <ID>UndocumentedPublicFunction:dependencies.kt$fun McProject.removeDependencyWithDelete( statement: BuildFileStatement, configuredDependency: ConfiguredDependency? = null )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.child(vararg childPath: String): File</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.createSafely(content: String? = null)</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.existsOrNull(): File?</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.findMinimumIndent(): String</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeGroovy( @Language("groovy") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeJava( @Language("java") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeKotlin( @Language("kotlin") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun Path.child(vararg childPath: String): File</ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R : Any> Flow&lt;T>.mapAsyncNotNull(transform: suspend (T) -> R?): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R : Any> Iterable&lt;T>.mapAsyncNotNull(transform: suspend (T) -> R?): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R : Any> Sequence&lt;T>.mapAsyncNotNull(transform: suspend (T) -> R?): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R> Flow&lt;T>.mapAsync( concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (T) -> R ): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R> Iterable&lt;T>.mapAsync( concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (T) -> R ): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T, R> Sequence&lt;T>.mapAsync( concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (T) -> R ): Flow&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T> Flow&lt;T>.filterAsync(predicate: suspend (T) -> Boolean): Flow&lt;T></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T> Iterable&lt;T>.filterAsync(predicate: suspend (T) -> Boolean): Flow&lt;T></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T> Iterable&lt;T>.onEachAsync( concurrency: Int = DEFAULT_CONCURRENCY, action: suspend (T) -> Unit ): Flow&lt;T></ID>
    <ID>UndocumentedPublicFunction:flow.kt$@OptIn(ExperimentalCoroutinesApi::class) fun &lt;T> Sequence&lt;T>.filterAsync(predicate: suspend (T) -> Boolean): Flow&lt;T></ID>
    <ID>UndocumentedPublicFunction:flow.kt$fun &lt;T> Flow&lt;T>.distinct(): Flow&lt;T></ID>
    <ID>UndocumentedPublicFunction:flow.kt$suspend fun &lt;T, R> Flow&lt;T>.flatMapListConcat( destination: MutableList&lt;R> = mutableListOf(), transform: suspend (T) -> List&lt;R> ): List&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$suspend fun &lt;T, R> Flow&lt;T>.flatMapSetConcat( destination: MutableSet&lt;R> = mutableSetOf(), transform: suspend (T) -> Set&lt;R> ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:flow.kt$suspend fun &lt;T> Flow&lt;T>.any(predicate: suspend (T) -> Boolean): Boolean</ID>
    <ID>UndocumentedPublicFunction:flow.kt$suspend fun &lt;T> Flow&lt;T>.contains(element: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:hermit.kt$fun Hermit.tempDir(path: String = UUID.randomUUID().toString()): LazyResets&lt;File></ID>
    <ID>UndocumentedPublicFunction:hermit.kt$fun Hermit.tempFile(path: String = "temp.kt"): LazyResets&lt;File></ID>
    <ID>UndocumentedPublicFunction:javaVersion.kt$@Suppress("UnstableApiUsage") fun GradleJavaVersion.toJavaVersion(): JavaVersion</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun Collection&lt;File>.ktFiles(): List&lt;KtFile></ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.asKotlinScriptFileOrNull(): KtFile?</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.asKtFile(): KtFile</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.asKtFileOrNull(): KtFile?</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.isKotlinFile(): Boolean</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.isKotlinScriptFile(): Boolean</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun File.isKtFile(): Boolean</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun KtFile( @Language("kotlin") content: String ): KtFile</ID>
    <ID>UndocumentedPublicFunction:kotlinFiles.kt$fun KtFile( name: String, @Language("kotlin") content: String ): KtFile</ID>
    <ID>UndocumentedPublicFunction:ksp.kt$fun Project.applyKsp(useKsp: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtCallableDeclaration.isJvmStatic(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtFunction.jvmNameOrNull(): String?</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtProperty.isJvmField(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtPropertyAccessor.jvmNameOrNull(): String?</ID>
    <ID>UndocumentedPublicFunction:lazy.kt$ResetManager$fun register(delegate: Resets)</ID>
    <ID>UndocumentedPublicFunction:lazy.kt$ResetManager$fun resetAll()</ID>
    <ID>UndocumentedPublicFunction:lazy.kt$Resets$fun reset()</ID>
    <ID>UndocumentedPublicFunction:lazy.kt$fun &lt;T : Any> LazyResets( resetManager: ResetManager, valueFactory: suspend () -> T ): LazyResets&lt;T></ID>
    <ID>UndocumentedPublicFunction:lazy.kt$fun &lt;T> unsafeLazy(initializer: () -> T): Lazy&lt;T></ID>
    <ID>UndocumentedPublicFunction:lazy.kt$inline fun &lt;reified T : Any> ResetManager.lazyResets( noinline valueFactory: suspend () -> T ): LazyResets&lt;T></ID>
    <ID>UndocumentedPublicFunction:list.kt$fun List&lt;String>.positionOf( path: String, configuration: ConfigurationName ): Position?</ID>
    <ID>UndocumentedPublicFunction:mcProject.kt$suspend fun ConfiguredDependency.positionIn( dependentProject: McProject ): Position?</ID>
    <ID>UndocumentedPublicFunction:mcProject.kt$suspend fun ConfiguredDependency.statementOrNullIn( dependentProject: McProject ): DependencyDeclaration?</ID>
    <ID>UndocumentedPublicFunction:mcbuild.ben-manes.gradle.kts$fun isNonStable(version: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:mcbuild.gradle.kts$fun onKspToggled(useKsp: Boolean)</ID>
    <ID>UndocumentedPublicFunction:mcbuild.gradle.kts$fun onNewArtifactId(artifactId: String)</ID>
    <ID>UndocumentedPublicFunction:mcbuild.website.gradle.kts$fun File.updateModuleCheckVersionRef( version: String, failOnChanges: Boolean, updateTaskName: String = "" )</ID>
    <ID>UndocumentedPublicFunction:precompiled.kt$suspend fun &lt;T> T.createDependencyDeclaration( configurationName: ConfigurationName, identifier: Identifier, isTestFixtures: Boolean ): DependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:precompiled.kt$suspend fun &lt;T> T.createExternalDependencyDeclaration( isKotlin: Boolean, configInvocation: String, configurationName: ConfigurationName, identifier: Identifier, isTestFixtures: Boolean ): ExternalDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:precompiled.kt$suspend fun &lt;T> T.createProjectDependencyDeclaration( isKotlin: Boolean, configInvocation: String, configurationName: ConfigurationName, projectPath: ProjectPath, isTestFixtures: Boolean ): ModuleDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:project.kt$fun Boolean?.orPropertyDefault( gradleProject: GradleProject, key: String, defaultValue: Boolean ): Boolean</ID>
    <ID>UndocumentedPublicFunction:project.kt$fun FileTreeWalk.files(): Sequence&lt;File></ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$@Suppress("NestedBlockDepth", "ComplexMethod") suspend fun PsiElement.fqNameOrNull( project: McProject, sourceSetName: SourceSetName ): FqName?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtAnnotated.hasAnnotation(annotationFqName: FqName): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtBlockExpression.nameSafe(): String?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtCallExpression.nameSafe(): String?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtClassOrObject.isCompanionObject(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtDeclaration.isInCompanionObject()</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtDeclaration.isInObject()</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtDeclaration.isInObjectOrCompanionObject()</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun PsiElement.file(): File</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun PsiElement.isQualifiedPropertyOrCallExpression(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$inline fun &lt;reified T : PsiElement> PsiElement.getChildrenOfTypeRecursive(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$inline fun &lt;reified T : PsiElement> PsiElement.isPartOf()</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$suspend fun McProject.canResolveFqName( declaredName: FqName, sourceSetName: SourceSetName ): Boolean</ID>
    <ID>UndocumentedPublicFunction:publishing.kt$@Suppress("UnstableApiUsage") fun Project.configurePublishing( artifactId: String )</ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any, reified R : Any> T.getPrivateFieldByName(name: String): R</ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any> KClass&lt;T>.sealedSubclassConstructorsRecursive(): Sequence&lt;KFunction&lt;T>></ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any> KClass&lt;T>.sealedSubclassInstances(vararg args: Any?): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: ( group1: String, group2: String, group3: String, group4: String, group5: String ) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String, group3: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String, group3: String, group4: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun append(c: Char)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun append(str: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun appendLine(c: Char)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun appendLine(str: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun indent(indent: String, action: IndentScope.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.capitalize( locale: Locale = Locale.US )</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.decapitalize( locale: Locale = Locale.US )</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.findMinimumIndent( absoluteMinimum: String = " " ): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.positionOfStatement(statement: String): Position</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.prefixIfNot(prefix: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.remove(vararg patterns: Regex): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.remove(vararg strings: String): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.suffixIfNot(suffix: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun StringBuilder.indent(indent: String, action: IndentScope.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:uses.kt$suspend fun McProject.uses(dependency: ConfiguredDependency): Boolean</ID>
    <ID>UndocumentedPublicFunction:util.kt$fun KtValueArgumentList.getByNameOrIndex(index: Int, name: String): KtValueArgument?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun &lt;T : Node> T.simpleName(): String</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun &lt;T, R : ResolvedDeclaration> T.fqNameOrNull( typeDeclarations: List&lt;TypeDeclaration&lt;*>> ): String?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun Node.childrenRecursive(): Sequence&lt;Node></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildOfType(): T?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildrenOfType(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildrenOfTypeRecursive(): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.requireChildOfType(): T</ID>
    <ID>UndocumentedPublicProperty:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$val suppressedForEntireBlock = suppressedForEntireBlock.updateOldSuppresses()</ID>
    <ID>UndocumentedPublicProperty:AbstractDependenciesBlock.kt$AbstractDependenciesBlock.Companion$val testFixturesRegex = "testFixtures\\([\\s\\S]*\\)".toRegex()</ID>
    <ID>UndocumentedPublicProperty:AbstractModuleCheckTask.kt$AbstractModuleCheckTask$@get:Input val settings: ModuleCheckExtension = project.extensions .getByType(ModuleCheckExtension::class.java)</ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val androidBlocks: List&lt;AgpBlock.AndroidBlock></ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val assignments: List&lt;Assignment></ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val buildFeaturesBlocks: List&lt;AgpBlock.BuildFeaturesBlock></ID>
    <ID>UndocumentedPublicProperty:AndroidResourceDeclaredName.kt$AndroidDataBindingDeclaredName$val sourceLayout: UnqualifiedAndroidResourceReference</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceDeclaredName.kt$GeneratedAndroidResourceDeclaredName$val sourceR: AndroidRReference</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceDeclaredName.kt$GeneratedAndroidResourceDeclaredName$val sourceResource: UnqualifiedAndroidResourceReference</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$abstract val identifier: String</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceDeclaredName.kt$UnqualifiedAndroidResourceDeclaredName$val prefix: String</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceReference.kt$UnqualifiedAndroidResourceReference$val identifier by unsafeLazy { split[2] }</ID>
    <ID>UndocumentedPublicProperty:AndroidResourceReference.kt$UnqualifiedAndroidResourceReference$val prefix by unsafeLazy { split[1] }</ID>
    <ID>UndocumentedPublicProperty:AndroidStylesFile.kt$AndroidStylesFile$val name: String = file.nameWithoutExtension</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilAnnotatedType$val contributedScope: AnvilScopeName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilAnnotatedType$val contributedTypeDeclaration: DeclaredName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilGradlePlugin$val generateDaggerFactories: Boolean</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilGradlePlugin$val version: SemVer</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilScopeName$val fqName: FqName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilScopeNameEntry$val name: KotlinReference</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$RawAnvilAnnotatedType$val anvilScopeNameEntry: AnvilScopeNameEntry</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$RawAnvilAnnotatedType$val declaredName: DeclaredName</ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilGraph$val allAnnotations = mergeAnnotations + contributeAnnotations</ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val contributions: MutableSet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val merges: MutableSet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val scopeName: AnvilScopeName</ID>
    <ID>UndocumentedPublicProperty:ArtifactsCheckTask.kt$ArtifactsCheckTask.Color$val escape: String</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val fullText: String</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val propertyFullName: String</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val value: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val fullText: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val lambdaContent: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val settings: List&lt;T></ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val declarationText: String</ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val statementWithSurroundingText: String</ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val suppressed: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:CodeGeneratorBinding.kt$CodeGeneratorBinding.KotlinCompilerPlugin$val gradlePlugin: PluginDefinition</ID>
    <ID>UndocumentedPublicProperty:Config.kt$Config$val downstream: List&lt;Config> by lazy { downstreamSequence.toList() }</ID>
    <ID>UndocumentedPublicProperty:Config.kt$Config$val name: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:Config.kt$Config$val upstream: List&lt;Config> by lazy { upstreamSequence.toList() }</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName$val value: String</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val androidTestImplementation = ConfigurationName("androidTestImplementation")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val annotationProcessor = ConfigurationName("annotationProcessor")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val anvil = ConfigurationName("anvil")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val api = ConfigurationName("api")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val compile = ConfigurationName("compile")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val compileOnly = ConfigurationName("compileOnly")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val compileOnlyApi = ConfigurationName("compileOnlyApi")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val implementation = ConfigurationName("implementation")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val kapt = ConfigurationName("kapt")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val kotlinCompileClasspath = ConfigurationName("kotlinCompilerPluginClasspathMain")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val ksp = ConfigurationName("ksp")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val runtime = ConfigurationName("runtime")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val runtimeOnly = ConfigurationName("runtimeOnly")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val testApi = ConfigurationName("testApi")</ID>
    <ID>UndocumentedPublicProperty:Config.kt$ConfigurationName.Companion$val testImplementation = ConfigurationName("testImplementation")</ID>
    <ID>UndocumentedPublicProperty:ConfiguredDependency.kt$ConfiguredDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:CoroutineScopeModule.kt$DispatcherProviderComponent$val dispatcherProvider: DispatcherProvider</ID>
    <ID>UndocumentedPublicProperty:DeclarationVisitor.kt$DeclarationVisitor$val declarations: MutableSet&lt;DeclaredName> = mutableSetOf()</ID>
    <ID>UndocumentedPublicProperty:DeclaredName.kt$Generated$val sources: Set&lt;Reference></ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$DependencyDeclaration$val configName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val coordinates: MavenCoordinates</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val group: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val moduleName: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val version: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val projectAccessor: ProjectAccessor</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val projectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$UnknownDependencyDeclaration$val argument: String</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$UnknownDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val dependencyProjectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val isTestFixture: Boolean</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceResult.Found$val sourceDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val children: List&lt;DepthFinding></ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val depth: Int</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding.Companion$val NAME = FindingName("project-depth")</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val children: List&lt;ProjectDepth></ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val depth: Int</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DocumentedRule.kt$DocumentedRule.Companion$const val RULES_BASE_URL = "https://rbusarow.github.io/ModuleCheck/docs/rules/"</ID>
    <ID>UndocumentedPublicProperty:DownstreamDependency.kt$DownstreamDependency$val dependentProjectPath: ProjectPath.StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:DownstreamDependency.kt$DownstreamDependency$val projectDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val group: String?</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val moduleName: String</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val version: String?</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$val nameWithVersion by unsafeLazy { "${group ?: ""}:$moduleName:${version ?: ""}" }</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$val nameWithoutVersion by unsafeLazy { "${group ?: ""}:$moduleName" }</ID>
    <ID>UndocumentedPublicProperty:ExternalDependencyDeclarationVisitor.kt$ExternalDependencyDeclarationVisitor$val projectMatcher = """${group.orWildcard()}:${name.orWildcard()}:${version.orWildcard()}""" .replace(".", "\\.") .toRegex()</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$ConfigurationFinding$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$ConfiguredDependencyFinding$val dependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$DependencyFinding$val statementOrNull: LazyDeferred&lt;BuildFileStatement?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$DependencyFinding$val statementTextOrNull: LazyDeferred&lt;String?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependencyIdentifier: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val findingName: FindingName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val message: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val positionOrNull: LazyDeferred&lt;Position?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val configurationName: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val dependencyIdentifier: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val filePathString: String = "${buildFile.path}: ${positionOrNull?.logString().orEmpty()}"</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val findingName: FindingName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val fixed: Boolean</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val message: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val positionOrNull: Position?</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val sourceOrNull: String?</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.Position$val column: Int</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.Position$val row: Int</ID>
    <ID>UndocumentedPublicProperty:FindingFactory.kt$RuleFilter.Companion$val DEFAULT = RuleFilter { rule, settings -> rule.shouldApply(settings) }</ID>
    <ID>UndocumentedPublicProperty:Fixable.kt$Fixable.Companion$const val FIX_LABEL = "// ModuleCheck finding"</ID>
    <ID>UndocumentedPublicProperty:Fixable.kt$Fixable.Companion$const val INLINE_COMMENT = "// "</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val inject = FqName("javax.inject.Inject")</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val jvmField = FqName("kotlin.jvm.JvmField")</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val jvmStatic = FqName("kotlin.jvm.JvmStatic")</ID>
    <ID>UndocumentedPublicProperty:GraphvizFactory.kt$GraphvizFactory.Color$val value: String</ID>
    <ID>UndocumentedPublicProperty:GraphvizFactory.kt$GraphvizFactory.Companion$const val API_LINE = "\"#FF6347\""</ID>
    <ID>UndocumentedPublicProperty:GraphvizFactory.kt$GraphvizFactory.Companion$const val IMPLEMENTATION_LINE = "\"#FF6347\""</ID>
    <ID>UndocumentedPublicProperty:GraphvizFactory.kt$GraphvizFactory.Companion$const val TAB = " "</ID>
    <ID>UndocumentedPublicProperty:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser.Companion$val BLOCK_BODY_REGEX = """dependencies\s*\{([\s\S]*)\}""".toRegex()</ID>
    <ID>UndocumentedPublicProperty:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser.Companion$val NO_INSPECTION_REGEX = """//noinspection\s+(.*)\n""".toRegex()</ID>
    <ID>UndocumentedPublicProperty:HasConfigurations.kt$HasConfigurations$val configurations: Configurations</ID>
    <ID>UndocumentedPublicProperty:HasConfigurations.kt$HasConfigurations$val sourceSets: SourceSets</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasIdentifier$val identifier: Identifier</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasMavenCoordinates$val mavenCoordinates: MavenCoordinates</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasPath$val path: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:HasProjectCache.kt$HasProjectCache$val projectCache: ProjectCache</ID>
    <ID>UndocumentedPublicProperty:HasSuppressions.kt$HasSuppressedChildren$val allSuppressions: Map&lt;C, Set&lt;S>></ID>
    <ID>UndocumentedPublicProperty:HasSuppressions.kt$HasSuppressions$val suppressions: List&lt;T></ID>
    <ID>UndocumentedPublicProperty:InheritedDependencyFinding.kt$InheritedDependencyFinding$val source: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:InvokesConfigurationNames.kt$HasBuildFile$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:InvokesConfigurationNames.kt$HasBuildFile$val buildFileParser: BuildFileParser</ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val apiReferences: LazyDeferred&lt;Set&lt;Reference>></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val declarations: Set&lt;DeclaredName></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val importsLazy: Lazy&lt;Set&lt;Reference>></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val name: String</ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val packageFqName: String</ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$KotlinFile.ScopeArgumentParseResult$val contributeArguments: Set&lt;RawAnvilAnnotatedType></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$KotlinFile.ScopeArgumentParseResult$val mergeArguments: Set&lt;RawAnvilAnnotatedType></ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val annotationImports: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val name: String</ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val processor: String</ID>
    <ID>UndocumentedPublicProperty:LazyDeferred.kt$LazyDeferred$val isCompleted: Boolean</ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet$val isFullyCached: Boolean</ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet.DataSource$val priority: Priority</ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet.State$val cache: Set&lt;E></ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet.State$val remaining: List&lt;DataSource&lt;E>></ID>
    <ID>UndocumentedPublicProperty:MavenCoordinates.kt$Identifier$val name: String</ID>
    <ID>UndocumentedPublicProperty:McLogger.kt$Report$val entries: List&lt;ReportEntry></ID>
    <ID>UndocumentedPublicProperty:McLogger.kt$Report.ReportEntry$val message: String</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val anvilGradlePlugin: AnvilGradlePlugin?</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val externalDependencies: ExternalDependencies</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val javaSourceVersion: JavaVersion</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val jvmFileProviderFactory: JvmFileProvider.Factory</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val logger: McLogger</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val projectDependencies: ProjectDependencies</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val projectDir: File</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckBuildExtension.kt$ModuleCheckBuildExtension$var anvil: Boolean by objects.property(false) { diListener.onChanged(it, dagger) }</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckBuildExtension.kt$ModuleCheckBuildExtension$var artifactId: String? by objects.nullableProperty&lt;String> { if (it != null) artifactIdListener.onChanged(it) }</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckBuildExtension.kt$ModuleCheckBuildExtension$var dagger: Boolean by objects.property(false) { diListener.onChanged(anvil, it) }</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckBuildExtension.kt$ModuleCheckBuildExtension$var ksp: Boolean by objects.property(false) { kspListener.onChanged(it) }</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val description: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val documentationUrl: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val name: FindingName</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$@Assisted val autoCorrect: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val checkstyleReporter: CheckstyleReporter</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val dispatcherProvider: DispatcherProvider</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val graphvizFileWriter: GraphvizFileWriter</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val logger: McLogger</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val projectProvider: ProjectProvider</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val rules: DaggerList&lt;ModuleCheckRule&lt;*>></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val sarifReportFactory: SarifReportFactory</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val settings: ModuleCheckSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner.TimedResults$val data: R</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner.TimedResults$val timeMillis: Long</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var anvilFactoryGeneration: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var depths: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var disableAndroidResources: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var disableViewBinding: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var inheritedDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var mustBeApi: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var overShotDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var redundantDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var sortDependencies: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var sortPlugins: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedKapt: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedKotlinAndroidExtensions: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val ANVIL_FACTORY_GENERATION_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DEPTHS_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DISABLE_ANDROID_RESOURCES_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DISABLE_VIEW_BINDING_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val INHERITED_DEPENDENCY_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val MUST_BE_API_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val OVERSHOT_DEPENDENCY_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val REDUNDANT_DEPENDENCY_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val SORT_DEPENDENCIES_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val SORT_PLUGINS_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_DEPENDENCY_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_KAPT_DEFAULT = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_KOTLIN_ANDROID_EXTENSIONS_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ModuleCheckSettings$val checks: ChecksSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ModuleCheckSettings$val sort: SortSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$PerModuleReportSettings$var enabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$PerModuleReportSettings$var outputDir: String?</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportSettings$var enabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportSettings$var outputPath: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val CHECKSTYLE_ENABLED_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val CHECKSTYLE_PATH_DEFAULT = "build/reports/modulecheck/report.xml"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val DEPTHS_ENABLED_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val DEPTHS_PATH_DEFAULT = "build/reports/modulecheck/depths.txt"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val GRAPH_ENABLED_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val SARIF_ENABLED_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val SARIF_PATH_DEFAULT = "build/reports/modulecheck/modulecheck.sarif"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val TEXT_ENABLED_DEFAULT = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val TEXT_PATH_DEFAULT = "build/reports/modulecheck/report.txt"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings$var dependencyComparators: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings$var pluginComparators: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings.Companion$val DEPENDENCY_COMPARATORS_DEFAULT = listOf( """.*""", """kapt.*""" )</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings.Companion$val PLUGIN_COMPARATORS_DEFAULT = listOf( """id\("com\.android.*"\)""", """id\("android-.*"\)""", """id\("java-library"\)""", """kotlin\("jvm"\)""", """android.*""", """javaLibrary.*""", """kotlin.*""", """id.*""" )</ID>
    <ID>UndocumentedPublicProperty:MustBeApi.kt$InheritedDependencyWithSource$val projectDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:MustBeApi.kt$InheritedDependencyWithSource$val source: ProjectDependency?</ID>
    <ID>UndocumentedPublicProperty:MustBeApiFinding.kt$MustBeApiFinding$val source: ProjectDependency?</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val aliasedImports: Map&lt;String, ExplicitReference></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val apiReferences: Set&lt;Reference></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val imports: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val mustBeApi: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val packageName: String</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val resolved: Set&lt;Reference></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val stdLibNameOrNull: String.() -> ExplicitReference?</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val toExplicitReference: String.() -> Reference.ExplicitReference</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val toInterpretedReference: String.() -> Reference.InterpretedReference</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val unresolved: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$NameParser.NameParserPacket$val wildcardImports: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$ParsingInterceptor.Chain$val packet: NameParserPacket</ID>
    <ID>UndocumentedPublicProperty:NamedSymbol.kt$NamedSymbol$val name: String</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyFinding.kt$OverShotDependencyFinding$val oldDependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyFinding.kt$OverShotDependencyFinding.Companion$val NAME = FindingName("overshot-dependency")</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyRule.kt$OverShotDependencyRule$val settings: ModuleCheckSettings</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val kotlinAndroidExtensionEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val manifests: Map&lt;SourceSetName, File></ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val nonTransientRClass: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val resValues: Map&lt;SourceSetName, Set&lt;UnqualifiedAndroidResourceDeclaredName>></ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val viewBindingEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin.CanDisableAndroidBuildConfig$val buildConfigEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin.CanDisableAndroidResources$val androidResourcesEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasAGP: Boolean get() = platformPlugin.isAndroid()</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasAnvil: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasKapt: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasTestFixturesPlugin: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val platformPlugin: PlatformPlugin</ID>
    <ID>UndocumentedPublicProperty:Problem.kt$Problem$val isSuppressed: LazyDeferred&lt;Boolean> get() = lazyDeferred { statementOrNull.await()?.suppressed ?.contains(findingName.id) ?: false }</ID>
    <ID>UndocumentedPublicProperty:ProjectAccessor.kt$ProjectAccessor$val projectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:ProjectAccessor.kt$ProjectAccessor$val statementText: String</ID>
    <ID>UndocumentedPublicProperty:ProjectCache.kt$ProjectCache$val values: MutableCollection&lt;McProject> get() = delegate.values</ID>
    <ID>UndocumentedPublicProperty:ProjectContext.kt$ProjectContext.Element$val key: Key&lt;*></ID>
    <ID>UndocumentedPublicProperty:ProjectPath.kt$ProjectPath$abstract val value: String</ID>
    <ID>UndocumentedPublicProperty:ProjectPath.kt$ProjectPath$val typeSafeValue: String by lazy { when (this) { is StringProjectPath -> value.typeSafeName() is TypeSafeProjectPath -> value } }</ID>
    <ID>UndocumentedPublicProperty:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText$val psiElement: PsiElement</ID>
    <ID>UndocumentedPublicProperty:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText$val statementText: String = psiElement.text</ID>
    <ID>UndocumentedPublicProperty:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$val extension: T</ID>
    <ID>UndocumentedPublicProperty:RealJavaFile.kt$RealJavaFile$val file: File</ID>
    <ID>UndocumentedPublicProperty:RealKotlinFile.kt$RealKotlinFile$val constructorInjectedParams = lazyDeferred { referenceVisitor.constructorInjected.mapNotNull { psiResolver.fqNameOrNull(it) }.toSet() }</ID>
    <ID>UndocumentedPublicProperty:RealKotlinFile.kt$RealKotlinFile$val ktFile: KtFile</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val dependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val from: List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependencyFinding$val from: List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicProperty:Reference.kt$HasReferences$val references: LazySet&lt;Reference></ID>
    <ID>UndocumentedPublicProperty:RemovesDependency.kt$RemovesDependency$val oldDependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.McProjectWithSourceSetName$val project: McProject</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.McProjectWithSourceSetName$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:RulesComponent.kt$RulesComponent$val allRules: DaggerList&lt;ModuleCheckRule&lt;*>></ID>
    <ID>UndocumentedPublicProperty:RunnerComponent.kt$RunnerComponent$val runnerFactory: ModuleCheckRunner.Factory</ID>
    <ID>UndocumentedPublicProperty:SafeCache.kt$SafeCache$val values: Flow&lt;V></ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$BaselineState$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$ColumnKind$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Content$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Importance$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Level$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$ResultKind$val value: String</ID>
    <ID>UndocumentedPublicProperty:SortDependenciesFinding.kt$SortDependenciesFinding.Companion$val NAME = FindingName("sort-dependencies")</ID>
    <ID>UndocumentedPublicProperty:SortPluginsFinding.kt$SortPluginsFinding$val comparator: Comparator&lt;PluginDeclaration></ID>
    <ID>UndocumentedPublicProperty:SortPluginsFinding.kt$SortPluginsFinding.Companion$val NAME = FindingName("sort-plugins")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val annotationProcessorConfiguration: Config?</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val apiConfiguration: Config?</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val compileOnlyConfiguration: Config</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val downstream: List&lt;SourceSetName> by lazy { downstreamLazy.value }</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val hasExistingSourceFiles by lazy { jvmFiles.hasExistingFiles() || resourceFiles.hasExistingFiles() || layoutFiles.hasExistingFiles() }</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val implementationConfiguration: Config</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val jvmFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val layoutFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val name: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val resourceFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val runtimeOnlyConfiguration: Config</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSet$val upstream: List&lt;SourceSetName> by lazy { upstreamLazy.value }</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName$val value: String</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val ANDROID_TEST = SourceSetName("androidTest")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val ANVIL = SourceSetName("anvil")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val DEBUG = SourceSetName("debug")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val KAPT = SourceSetName("kapt")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val MAIN = SourceSetName("main")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val RELEASE = SourceSetName("release")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val TEST = SourceSetName("test")</ID>
    <ID>UndocumentedPublicProperty:SourceSet.kt$SourceSetName.Companion$val TEST_FIXTURES = SourceSetName("testFixtures")</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency$val isTestFixture: Boolean</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val group: String?</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val moduleName: String</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val version: String?</ID>
    <ID>UndocumentedPublicProperty:TaskComponent.kt$TaskComponent$val multiRuleFindingFactory: MultiRuleFindingFactory</ID>
    <ID>UndocumentedPublicProperty:TaskComponent.kt$TaskComponent$val projectProvider: GradleProjectProvider</ID>
    <ID>UndocumentedPublicProperty:TransitiveProjectDependency.kt$TransitiveProjectDependency$val contributed: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:TransitiveProjectDependency.kt$TransitiveProjectDependency$val source: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependencyIdentifier: Identifier</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:UnusedKaptProcessorRule.kt$const val KAPT_ALTERNATE_PLUGIN_ID = "kotlin-kapt"</ID>
    <ID>UndocumentedPublicProperty:UnusedKaptProcessorRule.kt$const val KAPT_PLUGIN_ID = "org.jetbrains.kotlin.kapt"</ID>
    <ID>UndocumentedPublicProperty:UnusedKotlinAndroidExtensionsRule.kt$const val KOTLIN_ANDROID_EXTENSIONS_PLUGIN_ID = "org.jetbrains.kotlin.android.extensions"</ID>
    <ID>UndocumentedPublicProperty:UnusedPluginFinding.kt$UnusedPluginFinding$val pluginDefinition: PluginDefinition</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile$val file: File</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile$val resourceReferencesAsRReferences: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.Companion$val REFERENCE_PREFIXES = listOf( "@anim/", "@animator/", "@arrays/", "@color/", "@dimen/", "@drawable/", "@font/", "@layout/", "@menu/", "@mipmap/", "@raw/", "@string/", "@style/" )</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.LayoutFile$val customViews: Lazy&lt;Set&lt;Reference>> = lazy { AndroidLayoutParser().parseViews(file).mapToSet { ExplicitXmlReference(it) } }</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.LayoutFile$val idDeclarations: Set&lt;UnqualifiedAndroidResourceDeclaredName> by lazy { attributes.filter { attribute -> attribute.startsWith("@+id/") } .mapNotNull { UnqualifiedAndroidResourceDeclaredName.fromString(it) } .toSet() }</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.LayoutFile$val name: String = file.nameWithoutExtension</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.ManifestFile$val basePackage: String? by lazy { AndroidManifestParser().parse(file)["package"] }</ID>
    <ID>UndocumentedPublicProperty:catalogs.kt$@Suppress("UnstableApiUsage") val Project.catalogs: VersionCatalogsExtension get() = extensions.getByType(VersionCatalogsExtension::class)</ID>
    <ID>UndocumentedPublicProperty:catalogs.kt$@Suppress("UnstableApiUsage") val Project.libsCatalog: VersionCatalog get() = catalogs.named("libs")</ID>
    <ID>UndocumentedPublicProperty:psi.kt$val configuration = CompilerConfiguration().apply { put( CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY, PrintingMessageCollector( System.err, MessageRenderer.PLAIN_FULL_PATHS, false ) ) }</ID>
    <ID>UndocumentedPublicProperty:psi.kt$val psiFileFactory: PsiFileFactory = PsiFileFactory.getInstance(psiProject)</ID>
    <ID>UndocumentedPublicProperty:publishing.kt$const val DOCS_WEBSITE = "https://rbusarow.github.io/ModuleCheck"</ID>
    <ID>UndocumentedPublicProperty:publishing.kt$const val GROUP = "com.rickbusarow.modulecheck"</ID>
    <ID>UndocumentedPublicProperty:publishing.kt$const val PLUGIN_ID = "com.rickbusarow.module-check"</ID>
    <ID>UndocumentedPublicProperty:publishing.kt$const val SOURCE_WEBSITE = "https://github.com/rbusarow/ModuleCheck"</ID>
    <ID>UndocumentedPublicProperty:publishing.kt$const val VERSION_NAME = "0.13.0-SNAPSHOT"</ID>
  </CurrentIssues>
</SmellBaseline>
