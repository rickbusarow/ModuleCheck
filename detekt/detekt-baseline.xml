<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (C) 2021-2022 Rick Busarow
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--@formatter:off   this file (or Detekt's parsing?) is broken if this gets auto-formatted-->
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>InvalidPackageDeclaration:VersionsMatrixYamlPlugin.kt$package modulecheck.builds</ID>
    <ID>MagicNumber:ArtifactsTask.kt$ArtifactsTask$4</ID>
    <ID>MagicNumber:JavaLibraryConventionPlugin.kt$JavaLibraryConventionPlugin$11</ID>
    <ID>NestedBlockDepth:ArtifactsCheckTask.kt$ArtifactsCheckTask$private fun StringBuilder.maybeAddChangedValueMessages( changed: List&lt;Pair&lt;ArtifactConfig, ArtifactConfig>> ): StringBuilder</ID>
    <ID>OutdatedDocumentation:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$fun addModuleStatement( configName: ConfigurationName, parsedString: String, projectPath: ProjectPath, projectAccessor: ProjectAccessor, suppressed: List&lt;String> )</ID>
    <ID>OutdatedDocumentation:ConfiguredDependency.kt$PluginDependency : Dependency</ID>
    <ID>OutdatedDocumentation:ModuleCheckRunner.kt$ModuleCheckRunner</ID>
    <ID>OutdatedDocumentation:OverShotDependencyFinding.kt$OverShotDependency</ID>
    <ID>SerialVersionUIDInSerializableClass:ArtifactConfig.kt$ArtifactConfig : Serializable</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$AbstractDependenciesBlock : DependenciesBlock</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:AbstractDependenciesBlock.kt$DependenciesBlocksProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$AbstractModuleCheckTask : DefaultTask</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$MultiRuleModuleCheckTask : AbstractModuleCheckTask</ID>
    <ID>UndocumentedPublicClass:AbstractModuleCheckTask.kt$SingleRuleModuleCheckTask : AbstractModuleCheckTask</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$AbstractPluginsBlock : PluginsBlock</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:AbstractPluginsBlock.kt$PluginsBlockProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AbstractProjectDependencyFinding.kt$AbstractProjectDependencyFinding : ProblemFixableFindingDependencyFindingConfiguredDependencyFinding</ID>
    <ID>UndocumentedPublicClass:AddsDependency.kt$AddsDependency : Fixable</ID>
    <ID>UndocumentedPublicClass:AndroidBasePackages.kt$AndroidBasePackages : Element</ID>
    <ID>UndocumentedPublicClass:AndroidBasePackages.kt$AndroidBasePackages$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations : Element</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingNameProvider.kt$AndroidDataBindingNameProvider</ID>
    <ID>UndocumentedPublicClass:AndroidDataBindingReferenceParsingInterceptor.kt$AndroidDataBindingReferenceParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings$AgpBlock : Block</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings.AgpBlock$AndroidBlock : AgpBlock</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettings.AgpBlock$BuildFeaturesBlock : AgpBlock</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicClass:AndroidGradleSettings.kt$AndroidGradleSettingsProvider$Factory</ID>
    <ID>UndocumentedPublicClass:AndroidLayoutParser.kt$AndroidLayoutParser</ID>
    <ID>UndocumentedPublicClass:AndroidManifestParser.kt$AndroidManifestParser</ID>
    <ID>UndocumentedPublicClass:AndroidPlatformPluginFactory.kt$AndroidPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:AndroidRDeclaredNames.kt$AndroidRDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidRNameProvider.kt$AndroidRNameProvider</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:AndroidResourceDeclaredNames.kt$AndroidResourceDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidResourceParser.kt$AndroidResourceParser</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferenceParsingInterceptor.kt$AndroidResourceReferenceParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferences.kt$AndroidResourceReferences : Element</ID>
    <ID>UndocumentedPublicClass:AndroidResourceReferences.kt$AndroidResourceReferences$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidSourceSetsParser.kt$AndroidSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:AndroidSourceSetsParser.kt$AndroidSourceSetsParser$Factory</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFile.kt$AndroidStylesFile : XmlFile</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFiles.kt$AndroidStylesFiles : Element</ID>
    <ID>UndocumentedPublicClass:AndroidStylesFiles.kt$AndroidStylesFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:AndroidStylesParser.kt$AndroidStylesParser</ID>
    <ID>UndocumentedPublicClass:AndroidUnqualifiedResources.kt$AndroidUnqualifiedResources$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilFactoryRule.kt$AnvilFactoryRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilAnnotatedType</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilGradlePlugin</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilScopeName</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$AnvilScopeNameEntry</ID>
    <ID>UndocumentedPublicClass:AnvilGradlePlugin.kt$RawAnvilAnnotatedType</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilGraph : Element</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilGraph$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilGraph.kt$AnvilScopedDeclarations</ID>
    <ID>UndocumentedPublicClass:AnvilScopeContributions.kt$AnvilScopeContributions : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeContributions.kt$AnvilScopeContributions$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilScopeDependencies.kt$AnvilScopeDependencies : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeDependencies.kt$AnvilScopeDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:AnvilScopeMerges.kt$AnvilScopeMerges : Element</ID>
    <ID>UndocumentedPublicClass:AnvilScopeMerges.kt$AnvilScopeMerges$Key : Key</ID>
    <ID>UndocumentedPublicClass:Assignment.kt$Assignment : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:BaseTest.kt$BaseTest : HermitJUnit5FancyShould</ID>
    <ID>UndocumentedPublicClass:Block.kt$Block&lt;T></ID>
    <ID>UndocumentedPublicClass:BuildFileParser.kt$BuildFileParser</ID>
    <ID>UndocumentedPublicClass:BuildFileParser.kt$BuildFileParser$Factory</ID>
    <ID>UndocumentedPublicClass:BuildFileStatement.kt$BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:CheckstyleReporter.kt$CheckstyleReporter</ID>
    <ID>UndocumentedPublicClass:ClasspathDependencies.kt$ClasspathDependencies : Element</ID>
    <ID>UndocumentedPublicClass:ClasspathDependencies.kt$ClasspathDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:ConcatenatingParsingInterceptor.kt$ConcatenatingParsingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:ConfigBuilder.kt$ConfigBuilder</ID>
    <ID>UndocumentedPublicClass:ConfigFactory.kt$ConfigFactory&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:ConfigurationsFactory.kt$ConfigurationsFactory</ID>
    <ID>UndocumentedPublicClass:ConfiguredDependency.kt$ConfiguredDependency : Dependency</ID>
    <ID>UndocumentedPublicClass:ConfiguredDependency.kt$Dependency</ID>
    <ID>UndocumentedPublicClass:CoroutineScopeModule.kt$DispatcherProviderComponent</ID>
    <ID>UndocumentedPublicClass:CouldUseAnvilFinding.kt$CouldUseAnvilFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:Declarations.kt$Declarations : Element</ID>
    <ID>UndocumentedPublicClass:Declarations.kt$Declarations$Key : Key</ID>
    <ID>UndocumentedPublicClass:DeclarationsProvider.kt$DeclarationsProvider</ID>
    <ID>UndocumentedPublicClass:Deletable.kt$Deletable : FindingDependencyFinding</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlock : BlockHasSuppressedChildren</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:DependenciesBlock.kt$DependenciesBlocksProvider$Factory</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$DependencyDeclaration : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$DependencyDeclaration$ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$ExternalDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$ModuleDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencyDeclaration.kt$UnknownDependencyDeclaration : DependencyDeclaration</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources : Element</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$Key : Key</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$SourceKey</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources$SourceResult</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources.SourceResult$Found : SourceResult</ID>
    <ID>UndocumentedPublicClass:DependencySources.kt$DependencySources.SourceResult$NOT_PRESENT : SourceResult</ID>
    <ID>UndocumentedPublicClass:DepthFinding.kt$DepthFinding : FindingComparable</ID>
    <ID>UndocumentedPublicClass:DepthLogFactory.kt$DepthLogFactory</ID>
    <ID>UndocumentedPublicClass:DepthReportFactory.kt$DepthReportFactory</ID>
    <ID>UndocumentedPublicClass:DepthRule.kt$DepthRule : DocumentedRuleReportOnlyRule</ID>
    <ID>UndocumentedPublicClass:Depths.kt$Depths : Element</ID>
    <ID>UndocumentedPublicClass:Depths.kt$Depths$Key : Key</ID>
    <ID>UndocumentedPublicClass:Depths.kt$ProjectDepth : Comparable</ID>
    <ID>UndocumentedPublicClass:DisableAndroidResourcesRule.kt$DisableAndroidResourcesRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:DisableViewBindingGenerationFinding.kt$DisableViewBindingGenerationFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:DisableViewBindingRule.kt$DisableViewBindingRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:DocumentedRule.kt$DocumentedRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:DownstreamDependency.kt$DownstreamDependency</ID>
    <ID>UndocumentedPublicClass:DownstreamProjects.kt$DownstreamProjects : SetElement</ID>
    <ID>UndocumentedPublicClass:DownstreamProjects.kt$DownstreamProjects$Key : Key</ID>
    <ID>UndocumentedPublicClass:ExternalDependencies.kt$ExternalDependencies : MutableMap</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency : ConfiguredDependencyHasMavenCoordinates</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency$ExternalCodeGeneratorDependency : ExternalDependencyMightHaveCodeGeneratorBinding</ID>
    <ID>UndocumentedPublicClass:ExternalDependency.kt$ExternalDependency$ExternalRuntimeDependency : ExternalDependency</ID>
    <ID>UndocumentedPublicClass:ExternalDependencyDeclarationVisitor.kt$ExternalDependencyDeclarationVisitor</ID>
    <ID>UndocumentedPublicClass:FancyShould.kt$FancyShould</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ConfiguredDependencyFinding : ConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$DependencyFinding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding$FindingResult</ID>
    <ID>UndocumentedPublicClass:Finding.kt$Finding$Position : Comparable</ID>
    <ID>UndocumentedPublicClass:Finding.kt$ProjectDependencyFinding : ConfiguredDependencyFindingConfigurationFinding</ID>
    <ID>UndocumentedPublicClass:FindingFactory.kt$FindingFactory&lt;T : Finding></ID>
    <ID>UndocumentedPublicClass:FindingFactory.kt$RuleFilter</ID>
    <ID>UndocumentedPublicClass:FindingName.kt$FindingName</ID>
    <ID>UndocumentedPublicClass:FindingResultFactory.kt$FindingResultFactory</ID>
    <ID>UndocumentedPublicClass:Fixable.kt$Fixable : FindingProblem</ID>
    <ID>UndocumentedPublicClass:Fixable.kt$ModifiesProjectDependency : RemovesDependencyAddsDependency</ID>
    <ID>UndocumentedPublicClass:FqNames.kt$FqNames</ID>
    <ID>UndocumentedPublicClass:GradleMcLogger.kt$GradleMcLogger : McLogger</ID>
    <ID>UndocumentedPublicClass:GradleProjectProvider.kt$GradleProjectProvider : ProjectProviderAllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:GraphvizFileWriter.kt$GraphvizFileWriter</ID>
    <ID>UndocumentedPublicClass:GroovyAndroidGradleParser.kt$GroovyAndroidGradleParser : AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:GroovyDependenciesBlock.kt$GroovyDependenciesBlock : AbstractDependenciesBlock</ID>
    <ID>UndocumentedPublicClass:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser</ID>
    <ID>UndocumentedPublicClass:GroovyPluginsBlock.kt$GroovyPluginsBlock : AbstractPluginsBlock</ID>
    <ID>UndocumentedPublicClass:GroovyPluginsBlockParser.kt$GroovyPluginsBlockParser</ID>
    <ID>UndocumentedPublicClass:HasConfigurations.kt$HasConfigurations</ID>
    <ID>UndocumentedPublicClass:HasConfigurations.kt$HasDependencies</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasMavenCoordinates : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasIdentifier.kt$HasPath : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:HasProjectCache.kt$HasProjectCache</ID>
    <ID>UndocumentedPublicClass:HasSuppressions.kt$HasSuppressions&lt;T : Any></ID>
    <ID>UndocumentedPublicClass:Imports.kt$Imports : Element</ID>
    <ID>UndocumentedPublicClass:Imports.kt$Imports$Key : Key</ID>
    <ID>UndocumentedPublicClass:InheritedDependencyFinding.kt$InheritedDependencyFinding : AbstractProjectDependencyFindingAddsDependencyComparable</ID>
    <ID>UndocumentedPublicClass:InheritedDependencyRule.kt$InheritedDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:InterpretingInterceptor.kt$InterpretingInterceptor : ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$HasBuildFile</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$HasDependencyDeclarations : HasBuildFileHasDependenciesHasConfigurationsPluginAware</ID>
    <ID>UndocumentedPublicClass:InvokesConfigurationNames.kt$InvokesConfigurationNames : PluginAwareHasBuildFileHasConfigurationsHasDependencyDeclarations</ID>
    <ID>UndocumentedPublicClass:JavaParserNodeResolver.kt$JavaParserNodeResolver</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$JavaFile : JvmFile</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$JvmFile : HasReferences</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$KotlinFile : JvmFile</ID>
    <ID>UndocumentedPublicClass:JvmFile.kt$KotlinFile$ScopeArgumentParseResult</ID>
    <ID>UndocumentedPublicClass:JvmFileProvider.kt$JvmFileProvider</ID>
    <ID>UndocumentedPublicClass:JvmFileProvider.kt$JvmFileProvider$Factory</ID>
    <ID>UndocumentedPublicClass:JvmFiles.kt$JvmFiles : Element</ID>
    <ID>UndocumentedPublicClass:JvmFiles.kt$JvmFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:JvmPlatformPluginFactory.kt$JvmPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:JvmSourceFiles.kt$JvmSourceFiles : Element</ID>
    <ID>UndocumentedPublicClass:JvmSourceFiles.kt$JvmSourceFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:JvmSourceSetsParser.kt$JvmSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:KaptDependencies.kt$KaptDependencies : Element</ID>
    <ID>UndocumentedPublicClass:KaptDependencies.kt$KaptDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:KaptMatcher.kt$KaptMatcher</ID>
    <ID>UndocumentedPublicClass:KotlinAndroidGradleParser.kt$KotlinAndroidGradleParser : AndroidGradleParser</ID>
    <ID>UndocumentedPublicClass:KotlinDependenciesBlock.kt$KotlinDependenciesBlock : AbstractDependenciesBlock</ID>
    <ID>UndocumentedPublicClass:KotlinDependenciesBlockParser.kt$KotlinDependenciesBlockParser</ID>
    <ID>UndocumentedPublicClass:KotlinPluginsBlock.kt$KotlinPluginsBlock : AbstractPluginsBlock</ID>
    <ID>UndocumentedPublicClass:KotlinPluginsBlockParser.kt$KotlinPluginsBlockParser</ID>
    <ID>UndocumentedPublicClass:LayoutFiles.kt$LayoutFiles : Element</ID>
    <ID>UndocumentedPublicClass:LayoutFiles.kt$LayoutFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet$State&lt;out E></ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet.DataSource$Priority : Comparable</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySet&lt;out E> : FlowLazySetComponent</ID>
    <ID>UndocumentedPublicClass:LazySet.kt$LazySetComponent&lt;out E></ID>
    <ID>UndocumentedPublicClass:ManifestFiles.kt$ManifestFiles : Element</ID>
    <ID>UndocumentedPublicClass:ManifestFiles.kt$ManifestFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:MavenCoordinates.kt$Identifier</ID>
    <ID>UndocumentedPublicClass:MavenCoordinates.kt$MavenCoordinates : IdentifierComparable</ID>
    <ID>UndocumentedPublicClass:McConfiguration.kt$McConfiguration</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$McLogger</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report$ReportBuilder</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report$ReportEntry</ID>
    <ID>UndocumentedPublicClass:McLogger.kt$Report.ReportEntry$AppendNewLine</ID>
    <ID>UndocumentedPublicClass:McProject.kt$McProject : ProjectContextComparableHasPathHasProjectCacheHasBuildFileHasConfigurationsHasDependenciesHasSourceSetsHasDependencyDeclarationsInvokesConfigurationNamesHasPlatformPluginPluginAware</ID>
    <ID>UndocumentedPublicClass:McProjectBuilder.kt$McProjectBuilder&lt;P : PlatformPluginBuilder&lt;*>> : HasDependencyDeclarationsInvokesConfigurationNamesHasDependencies</ID>
    <ID>UndocumentedPublicClass:McSourceSet.kt$HasSourceSets</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ChecksExtension : ChecksSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ModuleCheckExtension : ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$PerModuleReportExtension : PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ReportExtension : ReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$ReportsExtension : ReportsSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckExtension.kt$SortExtension : SortSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckPlugin.kt$ModuleCheckPlugin : Plugin</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$AllRules</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$ModuleCheckRule&lt;T : Finding></ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$ReportOnlyRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRule.kt$SortRule&lt;T : Finding> : ModuleCheckRule</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRunner.kt$ModuleCheckRunner$Factory</ID>
    <ID>UndocumentedPublicClass:ModuleCheckRunner.kt$ModuleCheckRunner$TimedResults&lt;R></ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ChecksSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ReportSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$ReportsSettings</ID>
    <ID>UndocumentedPublicClass:ModuleCheckSettings.kt$SortSettings</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$InheritedDependencyWithSource</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$MustBeApi : SetElement</ID>
    <ID>UndocumentedPublicClass:MustBeApi.kt$MustBeApi$Key : Key</ID>
    <ID>UndocumentedPublicClass:MustBeApiFinding.kt$MustBeApiFinding : AbstractProjectDependencyFindingModifiesProjectDependencyAddsDependencyRemovesDependency</ID>
    <ID>UndocumentedPublicClass:MustBeApiRule.kt$MustBeApiRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$NameParser</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingChain : Chain</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingChain$Factory : NameParser</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingInterceptor</ID>
    <ID>UndocumentedPublicClass:NameParser.kt$ParsingInterceptor$Chain</ID>
    <ID>UndocumentedPublicClass:OverShotDependencies.kt$OverShotDependencies : Element</ID>
    <ID>UndocumentedPublicClass:OverShotDependencies.kt$OverShotDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:OverShotDependencyFinding.kt$OverShotDependencyFinding : AbstractProjectDependencyFindingAddsDependency</ID>
    <ID>UndocumentedPublicClass:OverShotDependencyRule.kt$OverShotDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin : PlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidApplicationPlugin : PlatformPluginAndroidPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidDynamicFeaturePlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidLibraryPlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidResourcesCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$AndroidTestPlugin : PlatformPluginAndroidPlatformPluginCanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$CanDisableAndroidBuildConfig</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$AndroidPlatformPlugin$CanDisableAndroidResources</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin : PlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin$JavaLibraryPlugin : JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPlugin.kt$JvmPlatformPlugin$KotlinJvmPlugin : JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$AndroidApplicationPluginBuilder : AndroidPlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$AndroidDynamicFeaturePluginBuilder : AndroidPlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$AndroidLibraryPluginBuilder : AndroidPlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder&lt;T : AndroidPlatformPlugin> : PlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$AndroidTestPluginBuilder : AndroidPlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$JavaLibraryPluginBuilder : PlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$KotlinJvmPluginBuilder : PlatformPluginBuilder</ID>
    <ID>UndocumentedPublicClass:PlatformPluginBuilder.kt$PlatformPluginBuilder&lt;T : PlatformPlugin></ID>
    <ID>UndocumentedPublicClass:PluginAware.kt$HasPlatformPlugin : PluginAware</ID>
    <ID>UndocumentedPublicClass:PluginAware.kt$PluginAware</ID>
    <ID>UndocumentedPublicClass:PluginDeclaration.kt$PluginDeclaration : BuildFileStatement</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlock : BlockHasSuppressedChildren</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:PluginsBlock.kt$PluginsBlockProvider$Factory</ID>
    <ID>UndocumentedPublicClass:PrintLogger.kt$PrintLogger : McLogger</ID>
    <ID>UndocumentedPublicClass:Problem.kt$Problem : FindingDependencyFinding</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor$StringProjectAccessor : ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectAccessor.kt$ProjectAccessor$TypeSafeProjectAccessor : ProjectAccessor</ID>
    <ID>UndocumentedPublicClass:ProjectCache.kt$ProjectCache : HasTraceTags</ID>
    <ID>UndocumentedPublicClass:ProjectCollector.kt$ProjectCollector</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext$Element</ID>
    <ID>UndocumentedPublicClass:ProjectContext.kt$ProjectContext$Key&lt;E : Element></ID>
    <ID>UndocumentedPublicClass:ProjectDependencies.kt$ProjectDependencies : MutableMap</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath : IdentifierComparable</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath$StringProjectPath : ProjectPath</ID>
    <ID>UndocumentedPublicClass:ProjectPath.kt$ProjectPath$TypeSafeProjectPath : ProjectPath</ID>
    <ID>UndocumentedPublicClass:ProjectProvider.kt$ProjectProvider : HasProjectCacheAllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:ProjectProvider.kt$ProjectRoot</ID>
    <ID>UndocumentedPublicClass:PsiElementResolver.kt$PsiElementResolver</ID>
    <ID>UndocumentedPublicClass:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText</ID>
    <ID>UndocumentedPublicClass:PublicDependencies.kt$PublicDependencies : SetElement</ID>
    <ID>UndocumentedPublicClass:PublicDependencies.kt$PublicDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:RealAllProjectPathsProvider.kt$RealAllProjectPathsProvider : AllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidDataBindingNameProvider.kt$RealAndroidDataBindingNameProvider : AndroidDataBindingNameProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidGradleSettingsProvider.kt$RealAndroidGradleSettingsProvider : AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidGradleSettingsProvider.kt$RealAndroidGradleSettingsProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory : AndroidPlatformPluginFactory</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory$Type&lt;T : AndroidCommonExtension></ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Application : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$DynamicFeature : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Library : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$Test : Type</ID>
    <ID>UndocumentedPublicClass:RealAndroidRNameProvider.kt$RealAndroidRNameProvider : AndroidRNameProvider</ID>
    <ID>UndocumentedPublicClass:RealAndroidSourceSetsParser.kt$RealAndroidSourceSetsParser$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealBuildFileParser.kt$RealBuildFileParser : BuildFileParser</ID>
    <ID>UndocumentedPublicClass:RealBuildFileParser.kt$RealBuildFileParser$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealConfigurationsFactory.kt$RealConfigurationsFactory : ConfigurationsFactory</ID>
    <ID>UndocumentedPublicClass:RealDeclarationsProvider.kt$RealDeclarationsProvider : DeclarationsProvider</ID>
    <ID>UndocumentedPublicClass:RealDependenciesBlocksProvider.kt$RealDependenciesBlocksProvider : DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicClass:RealDependenciesBlocksProvider.kt$RealDependenciesBlocksProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealDocsWebsiteUrlProvider : DocsWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealModuleCheckVersionProvider : ModuleCheckVersionProvider</ID>
    <ID>UndocumentedPublicClass:RealDocsWebsiteUrlProvider.kt$RealSourceWebsiteUrlProvider : SourceWebsiteUrlProvider</ID>
    <ID>UndocumentedPublicClass:RealFindingResultFactory.kt$RealFindingResultFactory : FindingResultFactory</ID>
    <ID>UndocumentedPublicClass:RealJavaFile.kt$RealJavaFile : JavaFile</ID>
    <ID>UndocumentedPublicClass:RealJvmFileProvider.kt$RealJvmFileProvider : JvmFileProvider</ID>
    <ID>UndocumentedPublicClass:RealJvmFileProvider.kt$RealJvmFileProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RealJvmSourceSetsParser.kt$RealJvmSourceSetsParser : JvmSourceSetsParser</ID>
    <ID>UndocumentedPublicClass:RealKotlinFile.kt$RealKotlinFile : KotlinFile</ID>
    <ID>UndocumentedPublicClass:RealMcProject.kt$RealMcProject : McProject</ID>
    <ID>UndocumentedPublicClass:RealPluginsBlockProvider.kt$RealPluginsBlockProvider : PluginsBlockProvider</ID>
    <ID>UndocumentedPublicClass:RealPluginsBlockProvider.kt$RealPluginsBlockProvider$Factory : Factory</ID>
    <ID>UndocumentedPublicClass:RedundantDependencies.kt$RedundantDependencies : Element</ID>
    <ID>UndocumentedPublicClass:RedundantDependencies.kt$RedundantDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:RedundantDependencyFinding.kt$RedundantDependency</ID>
    <ID>UndocumentedPublicClass:RedundantDependencyFinding.kt$RedundantDependencyFinding : AbstractProjectDependencyFindingRemovesDependencyDeletable</ID>
    <ID>UndocumentedPublicClass:RedundantRule.kt$RedundantRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:ReferenceVisitor.kt$ReferenceVisitor : KtTreeVisitorVoid</ID>
    <ID>UndocumentedPublicClass:References.kt$References : Element</ID>
    <ID>UndocumentedPublicClass:References.kt$References$Key : Key</ID>
    <ID>UndocumentedPublicClass:RemovesDependency.kt$RemovesDependency : Fixable</ID>
    <ID>UndocumentedPublicClass:RemovesDependency.kt$RemovesDependency$RemovalStrategy</ID>
    <ID>UndocumentedPublicClass:ReportFactory.kt$ReportFactory</ID>
    <ID>UndocumentedPublicClass:ResSourceFiles.kt$ResSourceFiles : Element</ID>
    <ID>UndocumentedPublicClass:ResSourceFiles.kt$ResSourceFiles$Key : Key</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames : Element</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$Key : Key</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$McProjectWithSourceSetName</ID>
    <ID>UndocumentedPublicClass:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$NameInSourceSet</ID>
    <ID>UndocumentedPublicClass:RulesComponent.kt$RulesComponent</ID>
    <ID>UndocumentedPublicClass:RunnerComponent.kt$RunnerComponent</ID>
    <ID>UndocumentedPublicClass:SafeXmlParser.kt$SafeXmlParser</ID>
    <ID>UndocumentedPublicClass:SarifReport.kt$Content</ID>
    <ID>UndocumentedPublicClass:SarifReport.kt$Role</ID>
    <ID>UndocumentedPublicClass:SarifReportFactory.kt$SarifReportFactory</ID>
    <ID>UndocumentedPublicClass:SortDependenciesFinding.kt$SortDependenciesFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:SortDependenciesRule.kt$SortDependenciesRule : DocumentedRuleSortRule</ID>
    <ID>UndocumentedPublicClass:SortPluginsFinding.kt$SortPluginsFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:SortPluginsRule.kt$SortPluginsRule : DocumentedRuleSortRule</ID>
    <ID>UndocumentedPublicClass:SourceSetBuilder.kt$SourceSetBuilder</ID>
    <ID>UndocumentedPublicClass:SourceSetDependencies.kt$SourceSetDependencies : Element</ID>
    <ID>UndocumentedPublicClass:SourceSetDependencies.kt$SourceSetDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency : HasIdentifier</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency$SourceSetExternalDependency : SourceSetDependencyHasMavenCoordinates</ID>
    <ID>UndocumentedPublicClass:SourceSetDependency.kt$SourceSetDependency$SourceSetProjectDependency : SourceSetDependencyHasPath</ID>
    <ID>UndocumentedPublicClass:SourceSetName.kt$SourceSetName</ID>
    <ID>UndocumentedPublicClass:SourceSetsFactory.kt$SourceSetsFactory</ID>
    <ID>UndocumentedPublicClass:Suppressions.kt$Suppressions</ID>
    <ID>UndocumentedPublicClass:TaskComponent.kt$TaskComponent : RunnerComponentRulesComponent</ID>
    <ID>UndocumentedPublicClass:TaskComponent.kt$TaskComponent$Factory</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestChecksSettings : ChecksSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestPerModuleReportSettings : PerModuleReportSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestReportSettings : ReportSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestReportsSettings : ReportsSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestSettings : ModuleCheckSettings</ID>
    <ID>UndocumentedPublicClass:TestSettings.kt$TestSortSettings : SortSettings</ID>
    <ID>UndocumentedPublicClass:Trace.kt$Trace$Key : Key</ID>
    <ID>UndocumentedPublicClass:TransitiveProjectDependency.kt$TransitiveProjectDependency</ID>
    <ID>UndocumentedPublicClass:TypeSafeProjectPathResolver.kt$AllProjectPathsProvider</ID>
    <ID>UndocumentedPublicClass:UnusedDependencies.kt$UnusedDependencies : Element</ID>
    <ID>UndocumentedPublicClass:UnusedDependencies.kt$UnusedDependencies$Key : Key</ID>
    <ID>UndocumentedPublicClass:UnusedDependency.kt$UnusedDependency</ID>
    <ID>UndocumentedPublicClass:UnusedDependency.kt$UnusedDependencyFinding : AbstractProjectDependencyFindingRemovesDependencyDeletable</ID>
    <ID>UndocumentedPublicClass:UnusedDependencyRule.kt$UnusedDependencyRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptPluginRule.kt$UnusedKaptPluginRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessorFinding.kt$UnusedKaptProcessorFinding : FindingProblemFixableDependencyFindingConfigurationFindingRemovesDependency</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessorRule.kt$UnusedKaptProcessorRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessors.kt$UnusedKaptProcessors : Element</ID>
    <ID>UndocumentedPublicClass:UnusedKaptProcessors.kt$UnusedKaptProcessors$Key : Key</ID>
    <ID>UndocumentedPublicClass:UnusedKotlinAndroidExtensionsRule.kt$UnusedKotlinAndroidExtensionsRule : DocumentedRule</ID>
    <ID>UndocumentedPublicClass:UnusedPluginFinding.kt$UnusedPluginFinding : FindingProblemFixableDeletable</ID>
    <ID>UndocumentedPublicClass:UnusedResourcesGenerationFinding.kt$UnusedResourcesGenerationFinding : FindingFixable</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile : HasReferences</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile$LayoutFile : XmlFile</ID>
    <ID>UndocumentedPublicClass:XmlFile.kt$XmlFile$ManifestFile : XmlFile</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$fun addNonModuleStatement( configName: ConfigurationName, parsedString: String, coordinates: MavenCoordinates, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$AbstractDependenciesBlock$fun addUnknownStatement( configName: ConfigurationName, parsedString: String, argument: String, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$DependenciesBlocksProvider$suspend fun get(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:AbstractDependenciesBlock.kt$DependenciesBlocksProvider.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicFunction:AbstractModuleCheckTask.kt$AbstractModuleCheckTask$@TaskAction fun run()</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$AbstractPluginsBlock$fun addStatement( parsedString: String, suppressed: List&lt;String> )</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$PluginsBlockProvider$fun get(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:AbstractPluginsBlock.kt$PluginsBlockProvider.Factory$fun create(buildFile: File): PluginsBlockProvider</ID>
    <ID>UndocumentedPublicFunction:AbstractProjectDependencyFinding.kt$AbstractProjectDependencyFinding$abstract fun fromStringOrEmpty(): String</ID>
    <ID>UndocumentedPublicFunction:AddsDependency.kt$AddsDependency$suspend fun addDependency(): Boolean</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$AndroidBasePackages$suspend fun get(sourceSetName: SourceSetName): PackageName?</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$suspend fun ProjectContext.androidBasePackages(): AndroidBasePackages</ID>
    <ID>UndocumentedPublicFunction:AndroidBasePackages.kt$suspend fun ProjectContext.androidBasePackagesForSourceSetName( sourceSetName: SourceSetName ): PackageName?</ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$AndroidDataBindingDeclarations$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$suspend fun ProjectContext.androidDataBindingDeclarations(): AndroidDataBindingDeclarations</ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingDeclarations.kt$suspend fun ProjectContext.androidDataBindingDeclarationsForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidDataBindingNameProvider.kt$AndroidDataBindingNameProvider$suspend fun get(): LazySet&lt;AndroidDataBindingDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleParser$suspend fun parse(buildFile: File): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleSettingsProvider$suspend fun get(): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:AndroidGradleSettings.kt$AndroidGradleSettingsProvider.Factory$fun create(buildFile: File): AndroidGradleSettingsProvider</ID>
    <ID>UndocumentedPublicFunction:AndroidLayoutParser.kt$AndroidLayoutParser$fun parseResources(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidLayoutParser.kt$AndroidLayoutParser$fun parseViews(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidManifestParser.kt$AndroidManifestParser$fun parse(file: File): Map&lt;String, String></ID>
    <ID>UndocumentedPublicFunction:AndroidManifestParser.kt$AndroidManifestParser$fun parseResources(file: File): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$suspend fun all(): Set&lt;AndroidRDeclaredName></ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$AndroidRDeclaredNames$suspend fun get(sourceSetName: SourceSetName): AndroidRDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$suspend fun ProjectContext.androidRDeclaredNameForSourceSetName( sourceSetName: SourceSetName ): AndroidRDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:AndroidRDeclaredNames.kt$suspend fun ProjectContext.androidRDeclaredNames(): AndroidRDeclaredNames</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceDeclaredNames.kt$suspend fun ProjectContext.androidResourceDeclaredNames(): AndroidResourceDeclaredNames</ID>
    <ID>UndocumentedPublicFunction:AndroidResourceReferences.kt$AndroidResourceReferences$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:AndroidResourceReferences.kt$suspend fun ProjectContext.androidResourceReferencesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:AndroidSourceSetsParser.kt$AndroidSourceSetsParser$fun parse(): SourceSets</ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$AndroidStylesFiles$suspend fun all(): Map&lt;SourceSetName, Set&lt;AndroidStylesFile>></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$AndroidStylesFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;AndroidStylesFile></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$suspend fun ProjectContext.androidStylesFiles(): AndroidStylesFiles</ID>
    <ID>UndocumentedPublicFunction:AndroidStylesFiles.kt$suspend fun ProjectContext.androidStylesFilesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;AndroidStylesFile></ID>
    <ID>UndocumentedPublicFunction:AndroidStylesParser.kt$AndroidStylesParser$fun parseFile(file: File): Set&lt;UnqualifiedAndroidResourceReferenceName></ID>
    <ID>UndocumentedPublicFunction:AnvilFactoryRule.kt$AnvilFactoryRule$@Suppress("ComplexMethod") suspend fun parse(findingName: FindingName, project: McProject): List&lt;CouldUseAnvilFinding></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun all(): List&lt;Map&lt;AnvilScopeName, AnvilScopedDeclarations>></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun get( sourceSetName: SourceSetName ): Map&lt;AnvilScopeName, AnvilScopedDeclarations></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$AnvilGraph$suspend fun mergedScopeNames(): List&lt;AnvilScopeName></ID>
    <ID>UndocumentedPublicFunction:AnvilGraph.kt$suspend fun ProjectContext.anvilGraph(): AnvilGraph</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeContributions.kt$suspend fun ProjectContext.anvilScopeContributions(): AnvilScopeContributions</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$AnvilScopeDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$suspend fun ProjectContext.anvilScopeDependencies(): AnvilScopeDependencies</ID>
    <ID>UndocumentedPublicFunction:AnvilScopeDependencies.kt$suspend fun ProjectContext.anvilScopeDependenciesForSourceSetName( sourceSetName: SourceSetName ): List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:AnvilScopeMerges.kt$suspend fun ProjectContext.anvilScopeMerges(): AnvilScopeMerges</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun File.relativePath(): String</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun String.clean(): String</ID>
    <ID>UndocumentedPublicFunction:BaseTest.kt$BaseTest$fun test(action: suspend CoroutineScope.() -> Unit)</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun androidSettings(): AndroidGradleSettings</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun dependenciesBlocks(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser$suspend fun pluginsBlock(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:BuildFileParser.kt$BuildFileParser.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): BuildFileParser</ID>
    <ID>UndocumentedPublicFunction:CaseMatcher.kt$CaseMatcher$open fun matches(source: String?): Boolean</ID>
    <ID>UndocumentedPublicFunction:CheckstyleReporter.kt$CheckstyleReporter$fun createXml(results: List&lt;FindingResult>): String</ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$ClasspathDependencies$suspend fun all(): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$ClasspathDependencies$suspend fun get(key: SourceSetName): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ClasspathDependencies.kt$suspend fun ProjectContext.classpathDependencies(): ClasspathDependencies</ID>
    <ID>UndocumentedPublicFunction:CodeGenerator.kt$fun List&lt;CodeGenerator>.asMap(): Map&lt;String, CodeGenerator></ID>
    <ID>UndocumentedPublicFunction:ConfigBuilder.kt$ConfigBuilder$fun toConfig(configFactory: ConfigFactory&lt;String>): McConfiguration</ID>
    <ID>UndocumentedPublicFunction:ConfigBuilder.kt$ConfigBuilder.Companion$fun fromConfig(configuration: McConfiguration): ConfigBuilder</ID>
    <ID>UndocumentedPublicFunction:ConfigFactory.kt$ConfigFactory$fun create(t: T): McConfiguration</ID>
    <ID>UndocumentedPublicFunction:ConfigurationName.kt$fun &lt;T : Any> Map&lt;ConfigurationName, Collection&lt;T>>.main(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:ConfigurationsFactory.kt$ConfigurationsFactory$fun create(gradleProject: GradleProject): Configurations</ID>
    <ID>UndocumentedPublicFunction:ConfiguredDependency.kt$ConfiguredDependency.Companion$inline fun &lt;reified T : ConfiguredDependency> T.copy( configurationName: ConfigurationName = this.configurationName, isTestFixture: Boolean = this.isTestFixture ): ConfiguredDependency</ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$Declarations$suspend fun all(): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$Declarations$suspend fun get( sourceSetName: SourceSetName, includeUpstream: Boolean, packageNameOrNull: PackageName? = null ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$suspend fun ProjectContext.declarations(): Declarations</ID>
    <ID>UndocumentedPublicFunction:Declarations.kt$suspend fun ProjectDependency.declarations( projectCache: ProjectCache, packageNameOrNull: PackageName? = null ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:DeclarationsProvider.kt$DeclarationsProvider$suspend fun get( sourceSetName: SourceSetName, packageName: PackageName ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:DeclarationsProvider.kt$DeclarationsProvider$suspend fun getWithUpstream( sourceSetName: SourceSetName, packageNameOrNull: PackageName? = null ): LazySet&lt;DeclaredName></ID>
    <ID>UndocumentedPublicFunction:DeclaredName.kt$QualifiedDeclaredName$open fun asReferenceName(language: CompatibleLanguage): ReferenceName</ID>
    <ID>UndocumentedPublicFunction:Deletable.kt$Deletable$suspend fun delete(): Boolean</ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( mavenCoordinates: MavenCoordinates, configName: ConfigurationName ): List&lt;ExternalDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( moduleRef: ProjectPath, configName: ConfigurationName, testFixtures: Boolean ): List&lt;ModuleDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlock$fun getOrEmpty( moduleRef: String, configName: ConfigurationName, testFixtures: Boolean ): List&lt;ModuleDependencyDeclaration></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlocksProvider$suspend fun get(): List&lt;DependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:DependenciesBlock.kt$DependenciesBlocksProvider.Factory$fun create(invokesConfigurationNames: InvokesConfigurationNames): DependenciesBlocksProvider</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$DependencyDeclaration.ConfigurationNameTransform$suspend operator fun invoke(configurationName: ConfigurationName): String</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$ExternalDependencyDeclaration$suspend fun copy( newConfigName: ConfigurationName = configName, newCoordinates: MavenCoordinates = coordinates, testFixtures: Boolean ): ExternalDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:DependencyDeclaration.kt$ModuleDependencyDeclaration$suspend fun copy( newConfigName: ConfigurationName = configName, newModulePath: ProjectPath = projectPath, testFixtures: Boolean ): ModuleDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$DependencySources$suspend fun sourceOfOrNull( dependencyProjectPath: ProjectPath, sourceSetName: SourceSetName, isTestFixture: Boolean ): ProjectDependency?</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$suspend fun McProject.requireSourceOf( dependencyProject: McProject, sourceSetName: SourceSetName, isTestFixture: Boolean ): ProjectDependency</ID>
    <ID>UndocumentedPublicFunction:DependencySources.kt$suspend fun ProjectContext.dependencySources(): DependencySources</ID>
    <ID>UndocumentedPublicFunction:DepthFinding.kt$DepthFinding$fun toProjectDepth(): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:DepthLogFactory.kt$DepthLogFactory$fun create(results: List&lt;DepthFinding>): Report</ID>
    <ID>UndocumentedPublicFunction:DepthReportFactory.kt$DepthReportFactory$fun create(results: List&lt;DepthFinding>): Report</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$Depths$suspend fun get(key: SourceSetName): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$ProjectDepth$fun toFinding(name: FindingName): DepthFinding</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$ProjectDepth$suspend fun fullTree(sourceSetName: SourceSetName = this.sourceSetName): Set&lt;ProjectDepth></ID>
    <ID>UndocumentedPublicFunction:Depths.kt$suspend fun McProject.depthForSourceSetName(sourceSetName: SourceSetName): ProjectDepth</ID>
    <ID>UndocumentedPublicFunction:Depths.kt$suspend fun McProject.depths(): Depths</ID>
    <ID>UndocumentedPublicFunction:DynamicTests.kt$DynamicTests$fun &lt;T : Any> Iterable&lt;() -> T>.dynamic( testName: String, test: (T) -> Unit ): List&lt;DynamicTest></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun add(dependency: ExternalDependency)</ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun main(): Set&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun private(): Set&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun public(): Set&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$fun remove(dependency: ExternalDependency)</ID>
    <ID>UndocumentedPublicFunction:ExternalDependencies.kt$ExternalDependencies$operator fun get(sourceSetName: SourceSetName): Set&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicFunction:ExternalDependencyDeclarationVisitor.kt$ExternalDependencyDeclarationVisitor$@Suppress("ReturnCount", "MaxLineLength") fun find(expression: KtCallExpression): Boolean</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun &lt;T, U : T> T.shouldBe(expected: U?)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun File.shouldHaveText(expected: String)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$FancyShould$infix fun String.shouldBe(expected: String)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$fun &lt;T, U : T> T.trimmedShouldBe(expected: U?, vararg excludeFromStack: KClass&lt;*>)</ID>
    <ID>UndocumentedPublicFunction:FancyShould.kt$fun &lt;T> T.trimmedAssert( vararg excludeFromStack: KClass&lt;*>, assertion: suspend T.() -> Unit )</ID>
    <ID>UndocumentedPublicFunction:Finding.kt$Finding$suspend fun toResult(fixed: Boolean): FindingResult</ID>
    <ID>UndocumentedPublicFunction:Finding.kt$Finding.Position$fun logString(): String</ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateFixable(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateReports(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$FindingFactory$suspend fun evaluateSorts(projects: List&lt;McProject>): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:FindingFactory.kt$RuleFilter$fun shouldEvaluate(rule: ModuleCheckRule&lt;*>, settings: ModuleCheckSettings): Boolean</ID>
    <ID>UndocumentedPublicFunction:FindingName.kt$FindingName.Companion$@Deprecated("This will be removed soon.") fun migrateLegacyIdOrNull(legacyID: String, logger: McLogger): String?</ID>
    <ID>UndocumentedPublicFunction:FindingResultFactory.kt$FindingResultFactory$suspend fun create( findings: List&lt;Finding>, autoCorrect: Boolean, deleteUnused: Boolean ): List&lt;FindingResult></ID>
    <ID>UndocumentedPublicFunction:Fixable.kt$Fixable$fun fixLabel(): String</ID>
    <ID>UndocumentedPublicFunction:Fixable.kt$Fixable$suspend fun fix(removalStrategy: RemovalStrategy): Boolean</ID>
    <ID>UndocumentedPublicFunction:GraphvizFileWriter.kt$GraphvizFileWriter$suspend fun write(depths: List&lt;ProjectDepth>)</ID>
    <ID>UndocumentedPublicFunction:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser$fun parse(file: File): List&lt;GroovyDependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:GroovyPluginsBlockParser.kt$GroovyPluginsBlockParser$fun parse(file: File): GroovyPluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:HasProjectCache.kt$HasProjectCache$fun HasPath.project(): McProject</ID>
    <ID>UndocumentedPublicFunction:Imports.kt$Imports$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:Imports.kt$suspend fun ProjectContext.imports(): Imports</ID>
    <ID>UndocumentedPublicFunction:Imports.kt$suspend fun ProjectContext.importsForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:InvokesConfigurationNames.kt$suspend fun HasDependencyDeclarations.getConfigurationInvocations(): Set&lt;String></ID>
    <ID>UndocumentedPublicFunction:JavaParserNodeResolver.kt$JavaParserNodeResolver$suspend fun fqNameOrNull( node: ClassOrInterfaceType, packageName: String, directImports: Collection&lt;String>, wildcardImports: Collection&lt;String> ): FqName?</ID>
    <ID>UndocumentedPublicFunction:JvmFileProvider.kt$JvmFileProvider$suspend fun getOrNull(file: File): JvmFile?</ID>
    <ID>UndocumentedPublicFunction:JvmFileProvider.kt$JvmFileProvider.Factory$fun create(project: McProject, sourceSetName: SourceSetName): JvmFileProvider</ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$JvmFiles$suspend fun get(sourceSetName: SourceSetName): Flow&lt;JvmFile></ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$suspend fun ProjectContext.jvmFiles(): JvmFiles</ID>
    <ID>UndocumentedPublicFunction:JvmFiles.kt$suspend fun ProjectContext.jvmFilesForSourceSetName( sourceSetName: SourceSetName ): Flow&lt;JvmFile></ID>
    <ID>UndocumentedPublicFunction:JvmPlatformPluginFactory.kt$JvmPlatformPluginFactory$fun create( gradleProject: GradleProject, hasTestFixturesPlugin: Boolean ): JvmPlatformPlugin</ID>
    <ID>UndocumentedPublicFunction:JvmPlatformPluginFactory.kt$fun GradleProject.getKotlinExtensionOrNull(): KotlinProjectExtension?</ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$JvmSourceFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$suspend fun ProjectContext.jvmSourceFiles(): JvmSourceFiles</ID>
    <ID>UndocumentedPublicFunction:JvmSourceFiles.kt$suspend fun ProjectContext.jvmSourcesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:JvmSourceSetsParser.kt$JvmSourceSetsParser$fun parse( parsedConfigurations: Configurations, gradleProject: GradleProject ): SourceSets</ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$KaptDependencies$suspend fun all(): List&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$KaptDependencies$suspend fun get(configurationName: ConfigurationName): Set&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$suspend fun ProjectContext.kaptDependencies(): KaptDependencies</ID>
    <ID>UndocumentedPublicFunction:KaptDependencies.kt$suspend fun ProjectContext.kaptDependenciesForConfig( configurationName: ConfigurationName ): Set&lt;ConfiguredDependency></ID>
    <ID>UndocumentedPublicFunction:KaptMatcher.kt$KaptMatcher$fun toCodeGeneratorBinding(): AnnotationProcessor</ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$KotlinDependenciesBlockParser$@Suppress("ReturnCount") suspend fun parse( invokesConfigurationNames: InvokesConfigurationNames ): List&lt;KotlinDependenciesBlock></ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$inline fun blockExpressionRecursiveVisitor( crossinline block: KtTreeVisitorVoid.(expression: KtBlockExpression) -> Unit ): KtTreeVisitorVoid</ID>
    <ID>UndocumentedPublicFunction:KotlinDependenciesBlockParser.kt$inline fun literalStringTemplateRecursiveVisitor( crossinline block: KtTreeVisitorVoid.(entry: KtLiteralStringTemplateEntry) -> Unit ): KtTreeVisitorVoid</ID>
    <ID>UndocumentedPublicFunction:KotlinPluginsBlockParser.kt$KotlinPluginsBlockParser$@Suppress("ReturnCount") fun parse(file: KtFile): KotlinPluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$LayoutFiles$suspend fun all(): Map&lt;SourceSetName, Set&lt;LayoutFile>></ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$LayoutFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;LayoutFile></ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$suspend fun ProjectContext.layoutFiles(): LayoutFiles</ID>
    <ID>UndocumentedPublicFunction:LayoutFiles.kt$suspend fun ProjectContext.layoutFilesForSourceSetName( sourceSetName: SourceSetName ): Set&lt;XmlFile.LayoutFile></ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$LazyDeferred$suspend fun await(): T</ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$fun &lt;T> (suspend () -> T).asLazyDeferred(): LazyDeferred&lt;T></ID>
    <ID>UndocumentedPublicFunction:LazyDeferred.kt$suspend fun &lt;T> Collection&lt;LazyDeferred&lt;T>>.awaitAll(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$@JvmName("lazySetSingle") fun &lt;E> lazySet( priority: Priority = MEDIUM, dataSource: suspend () -> E ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$fun snapshot(): State&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun contains(element: Any?): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun isEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet$suspend fun isNotEmpty(): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$LazySet.State$fun nextSources(): Sequence&lt;List&lt;DataSource&lt;E>>></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Collection&lt;LazySetComponent&lt;E>>.toLazySet(): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Flow&lt;E>.asDataSource( priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Flow&lt;E>.toLazySet( priority: Priority = MEDIUM ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> Lazy&lt;Set&lt;E>>.asDataSource( priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> LazyDeferred&lt;Set&lt;E>>.asDataSource( priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> dataSourceOf( vararg elements: E, priority: Priority = MEDIUM ): DataSource&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> emptyLazySet(): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( children: Collection&lt;LazySetComponent&lt;E>> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( priority: Priority = MEDIUM, dataSource: suspend () -> Set&lt;E> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$fun &lt;E> lazySet( vararg children: LazySetComponent&lt;E> ): LazySet&lt;E></ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$suspend fun &lt;T : B, E : B, B> LazySet&lt;T>.containsAny(elements: Collection&lt;E>): Boolean</ID>
    <ID>UndocumentedPublicFunction:LazySet.kt$suspend inline fun &lt;reified T : E, E> LazySet&lt;E>.getOrNull(element: E): T?</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$ManifestFiles$suspend fun get(sourceSetName: SourceSetName): XmlFile.ManifestFile?</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$suspend fun ProjectContext.manifestFileForSourceSetName( sourceSetName: SourceSetName ): XmlFile.ManifestFile?</ID>
    <ID>UndocumentedPublicFunction:ManifestFiles.kt$suspend fun ProjectContext.manifestFiles(): ManifestFiles</ID>
    <ID>UndocumentedPublicFunction:MavenCoordinates.kt$MavenCoordinates.Companion$fun parseOrNull(coordinateString: String): MavenCoordinates?</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report$fun joinToString(): String</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.Companion$fun build(buildAction: ReportBuilder.() -> Unit): Report</ID>
    <ID>UndocumentedPublicFunction:McLogger.kt$Report.ReportEntry$fun printToStdOut()</ID>
    <ID>UndocumentedPublicFunction:McName.kt$suspend inline fun &lt;reified T : McName> LazySet&lt;McName>.getNameOrNull(element: McName): T?</ID>
    <ID>UndocumentedPublicFunction:McProject.kt$fun McProject.isAndroid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$@Suppress("LongParameterList") fun addSourceSet( name: SourceSetName, jvmFiles: Set&lt;File> = emptySet(), resourceFiles: Set&lt;File> = emptySet(), layoutFiles: Set&lt;File> = emptySet(), upstreamNames: List&lt;SourceSetName> = emptyList(), downstreamNames: List&lt;SourceSetName> = emptyList() ): SourceSetBuilder</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun &lt;T : AndroidPlatformPluginBuilder&lt;*>> McProjectBuilder&lt;T>.addLayoutFile( name: String, @Language("xml") content: String, sourceSetName: SourceSetName = SourceSetName.MAIN )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun &lt;T : AndroidPlatformPluginBuilder&lt;*>> McProjectBuilder&lt;T>.addManifest( @Language("xml") content: String, sourceSetName: SourceSetName = SourceSetName.MAIN )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun &lt;T : AndroidPlatformPluginBuilder&lt;*>> McProjectBuilder&lt;T>.addResourceFile( name: String, @Language("xml") content: String, sourceSetName: SourceSetName = SourceSetName.MAIN )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun addDependency( configurationName: ConfigurationName, project: McProject, asTestFixture: Boolean = false, addToBuildFile: Boolean = true )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun addExternalDependency( configurationName: ConfigurationName, coordinates: String, isTestFixture: Boolean = false )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun addJavaSource( @Language("java") java: String, sourceSetName: SourceSetName = SourceSetName.MAIN, directory: String? = null, fileName: String? = null, sourceDirName: String = "java" ): File</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun addKotlinSource( @Language("kotlin") kotlin: String, sourceSetName: SourceSetName = SourceSetName.MAIN, directory: String? = null, fileName: String? = null, sourceDirName: String = "java" ): File</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun addSource( name: String, @Language("kotlin") kotlin: String, sourceSetName: SourceSetName = SourceSetName.MAIN )</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$fun requireSourceSetExists(name: SourceSetName)</ID>
    <ID>UndocumentedPublicFunction:McProjectBuilder.kt$McProjectBuilder$operator fun File.invoke(text: () -> String)</ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$McSourceSet$fun withDownstream(): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$McSourceSet$fun withUpstream(): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$fun Collection&lt;McSourceSet>.sortedByInheritance(): Sequence&lt;McSourceSet></ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$fun Iterable&lt;McSourceSet>.names(): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$fun Sequence&lt;McSourceSet>.names(): Sequence&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$fun SourceSetName.inheritsFrom( other: SourceSetName, hasSourceSets: HasSourceSets ): Boolean</ID>
    <ID>UndocumentedPublicFunction:McSourceSet.kt$fun SourceSetName.withDownStream( hasSourceSets: HasSourceSets ): List&lt;SourceSetName></ID>
    <ID>UndocumentedPublicFunction:ModuleCheckExtension.kt$ModuleCheckExtension$fun checks(action: Action&lt;ChecksSettings>)</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckExtension.kt$ModuleCheckExtension$fun sort(action: Action&lt;SortExtension>)</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRule.kt$ModuleCheckRule$fun shouldApply(settings: ModuleCheckSettings): Boolean</ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRule.kt$ModuleCheckRule$suspend fun check(project: McProject): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRunner.kt$ModuleCheckRunner$fun run(projects: List&lt;McProject>): Result&lt;Unit></ID>
    <ID>UndocumentedPublicFunction:ModuleCheckRunner.kt$ModuleCheckRunner.Factory$fun create(autoCorrect: Boolean): ModuleCheckRunner</ID>
    <ID>UndocumentedPublicFunction:MustBeApi.kt$suspend fun McProject.mustBeApiIn( dependentProject: McProject, sourceSetName: SourceSetName, isTestFixtures: Boolean ): Boolean</ID>
    <ID>UndocumentedPublicFunction:MustBeApi.kt$suspend fun ProjectContext.mustBeApi(): MustBeApi</ID>
    <ID>UndocumentedPublicFunction:NameParser.kt$NameParser$suspend fun parse(packet: NameParserPacket): NameParserPacket</ID>
    <ID>UndocumentedPublicFunction:NameParser.kt$ParsingInterceptor$suspend fun intercept(chain: Chain): NameParserPacket</ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$OverShotDependencies$suspend fun all(): List&lt;OverShotDependency></ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$OverShotDependencies$suspend fun get(configurationName: ConfigurationName): List&lt;OverShotDependency></ID>
    <ID>UndocumentedPublicFunction:OverShotDependencies.kt$suspend fun ProjectContext.overshotDependencies(): OverShotDependencies</ID>
    <ID>UndocumentedPublicFunction:PlatformPlugin.kt$PlatformPlugin$fun asAndroidOrNull(): AndroidPlatformPlugin?</ID>
    <ID>UndocumentedPublicFunction:PlatformPlugin.kt$fun PlatformPlugin.isAndroid(): Boolean</ID>
    <ID>UndocumentedPublicFunction:PlatformPluginBuilder.kt$PlatformPluginBuilder$fun toPlugin( dependencyModuleDescriptorAccess: DependencyModuleDescriptorAccess, projectPath: StringProjectPath, projectDependencies: ProjectDependencies, externalDependencies: ExternalDependencies ): T</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlock$fun getById(pluginId: String): PluginDeclaration?</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlockProvider$suspend fun get(): PluginsBlock?</ID>
    <ID>UndocumentedPublicFunction:PluginsBlock.kt$PluginsBlockProvider.Factory$fun create(buildFile: File): PluginsBlockProvider</ID>
    <ID>UndocumentedPublicFunction:ProjectAccessor.kt$ProjectAccessor.Companion$fun from(rawString: String, projectPath: ProjectPath): ProjectAccessor</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$fun clearContexts()</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$fun getValue(path: ProjectPath): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCache.kt$ProjectCache$operator fun set(path: ProjectPath, project: McProject): McProject?</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$@Contract(pure = true, value = "_->new") suspend fun McProject.editSimple( config: McProjectBuilder&lt;PlatformPluginBuilder&lt;PlatformPlugin>>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun allProjects(): List&lt;McProject></ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun androidApplication( path: String, androidPackage: String, config: McProjectBuilder&lt;AndroidApplicationPluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun androidDynamicFeature( path: String, androidPackage: String, config: McProjectBuilder&lt;AndroidDynamicFeaturePluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun androidLibrary( path: String, androidPackage: String, config: McProjectBuilder&lt;AndroidLibraryPluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun androidTest( path: String, androidPackage: String, config: McProjectBuilder&lt;AndroidTestPluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun javaProject( path: String, config: McProjectBuilder&lt;JavaLibraryPluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun kotlinProject( path: String, config: McProjectBuilder&lt;KotlinJvmPluginBuilder>.() -> Unit = {} ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$fun simpleProject( buildFileText: String? = null, path: String = ":lib" ): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$operator fun File.invoke(text: () -> String)</ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$suspend fun &lt;P : PlatformPluginBuilder&lt;*>> McProject.toProjectBuilder(): McProjectBuilder&lt;P></ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$suspend fun PlatformPlugin.toBuilder(): PlatformPluginBuilder&lt;*></ID>
    <ID>UndocumentedPublicFunction:ProjectCollector.kt$ProjectCollector$suspend fun resolveReferences()</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext$fun clearContext()</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext$suspend fun &lt;E : Element> get(key: Key&lt;E>): E</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext.Companion$operator fun invoke(project: McProject): ProjectContext</ID>
    <ID>UndocumentedPublicFunction:ProjectContext.kt$ProjectContext.Key$suspend operator fun invoke(project: McProject): E</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun add(cpd: ProjectDependency)</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun main(): Set&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun private(): Set&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun public(): Set&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$fun remove(cpd: ProjectDependency)</ID>
    <ID>UndocumentedPublicFunction:ProjectDependencies.kt$ProjectDependencies$operator fun get(sourceSetName: SourceSetName): Set&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath$abstract fun pathValue(typeSafeProjectPathResolver: TypeSafeProjectPathResolver): String</ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath$abstract fun toTypeSafe(): TypeSafeProjectPath</ID>
    <ID>UndocumentedPublicFunction:ProjectPath.kt$ProjectPath.Companion$fun from(rawString: String): ProjectPath</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun clearCaches()</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun get(path: ProjectPath): McProject</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectProvider$fun getAll(): List&lt;McProject></ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$ProjectRoot$fun get(): File</ID>
    <ID>UndocumentedPublicFunction:ProjectProvider.kt$fun ProjectProvider.toTypeSafeProjectPathResolver(): TypeSafeProjectPathResolver</ID>
    <ID>UndocumentedPublicFunction:PsiElementResolver.kt$PsiElementResolver$suspend fun declaredNameOrNull( token: PsiElement ): QualifiedDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:PublicDependencies.kt$suspend fun ProjectContext.publicDependencies(): PublicDependencies</ID>
    <ID>UndocumentedPublicFunction:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type.Companion$fun from(extension: AndroidCommonExtension): Type&lt;*></ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun &lt;T> T.canBeImported(): Boolean</ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun &lt;T> T.canBeResolved(): Boolean</ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun FieldDeclaration.apiReferences(): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:RealJavaFile.kt$fun MethodDeclaration.apiReferences(): List&lt;String></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$RedundantDependencies$suspend fun all(): List&lt;RedundantDependency></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$RedundantDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;RedundantDependency></ID>
    <ID>UndocumentedPublicFunction:RedundantDependencies.kt$suspend fun ProjectContext.redundantDependencies(): RedundantDependencies</ID>
    <ID>UndocumentedPublicFunction:RedundantDependencyFinding.kt$RedundantDependency$fun toFinding(findingName: FindingName): RedundantDependencyFinding</ID>
    <ID>UndocumentedPublicFunction:References.kt$References$suspend fun all(): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:References.kt$References$suspend fun get(sourceSetName: SourceSetName): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:References.kt$suspend fun ProjectContext.references(): References</ID>
    <ID>UndocumentedPublicFunction:References.kt$suspend fun ProjectContext.referencesForSourceSetName( sourceSetName: SourceSetName ): LazySet&lt;ReferenceName></ID>
    <ID>UndocumentedPublicFunction:RemovesDependency.kt$RemovesDependency$suspend fun removeDependency(removalStrategy: RemovalStrategy): Boolean</ID>
    <ID>UndocumentedPublicFunction:ReportFactory.kt$ReportFactory$fun create(results: List&lt;Finding.FindingResult>): Report</ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$ResSourceFiles$suspend fun all(): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$ResSourceFiles$suspend fun get(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$suspend fun ProjectContext.resSourceFiles(): ResSourceFiles</ID>
    <ID>UndocumentedPublicFunction:ResSourceFiles.kt$suspend fun ProjectContext.resourceFilesForSourceSetName(sourceSetName: SourceSetName): Set&lt;File></ID>
    <ID>UndocumentedPublicFunction:ResolvedDeclaredNames.kt$ResolvedDeclaredNames$suspend fun getSource( name: ResolvableMcName, sourceSetName: SourceSetName ): McProjectWithSourceSetName?</ID>
    <ID>UndocumentedPublicFunction:ResolvedDeclaredNames.kt$suspend fun ProjectContext.resolvedDeclaredNames(): ResolvedDeclaredNames</ID>
    <ID>UndocumentedPublicFunction:SafeXmlParser.kt$SafeXmlParser$fun parse(file: File): Node?</ID>
    <ID>UndocumentedPublicFunction:SafeXmlParser.kt$SafeXmlParser$fun parse(text: String): Node?</ID>
    <ID>UndocumentedPublicFunction:SarifReportFactory.kt$SarifReportFactory$fun create( findingResults: List&lt;Finding.FindingResult>, rules: List&lt;ModuleCheckRule&lt;*>> ): String</ID>
    <ID>UndocumentedPublicFunction:SortDependenciesFinding.kt$fun sortedDependenciesFileText( block: DependenciesBlock, fileText: String, comparator: Comparator&lt;String> ): String</ID>
    <ID>UndocumentedPublicFunction:SortPluginsFinding.kt$fun PluginsBlock.sortedPlugins( comparator: Comparator&lt;PluginDeclaration> ): String</ID>
    <ID>UndocumentedPublicFunction:SourceSetBuilder.kt$@Suppress("LongParameterList") fun McProjectBuilder&lt;*>.maybeAddSourceSet( name: SourceSetName, jvmFiles: Set&lt;File> = emptySet(), resourceFiles: Set&lt;File> = emptySet(), layoutFiles: Set&lt;File> = emptySet(), classpath: Set&lt;File> = setOf( File(CharRange::class.java.protectionDomain.codeSource.location.path) ), upstreamNames: List&lt;SourceSetName> = emptyList(), downstreamNames: List&lt;SourceSetName> = emptyList(), jvmTarget: JvmTarget = JVM_11 ): SourceSetBuilder</ID>
    <ID>UndocumentedPublicFunction:SourceSetBuilder.kt$SourceSetBuilder$fun toSourceSet( dependencyModuleDescriptorAccess: DependencyModuleDescriptorAccess, projectPath: StringProjectPath ): McSourceSet</ID>
    <ID>UndocumentedPublicFunction:SourceSetBuilder.kt$SourceSetBuilder.Companion$suspend fun fromSourceSet(sourceSet: McSourceSet): SourceSetBuilder</ID>
    <ID>UndocumentedPublicFunction:SourceSetDependencies.kt$SourceSetDependencies$suspend fun get(sourceSetName: SourceSetName): List&lt;TransitiveProjectDependency></ID>
    <ID>UndocumentedPublicFunction:SourceSetDependencies.kt$suspend fun ProjectContext.sourceSetDependencies(): SourceSetDependencies</ID>
    <ID>UndocumentedPublicFunction:SourceSetDependency.kt$fun ConfiguredDependency.toSourceSetDependency( sourceSetName: SourceSetName = configurationName.toSourceSetName() ): SourceSetDependency</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$SourceSetName$fun isTestFixtures(): Boolean</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.addPrefix(prefix: SourceSetName): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.addPrefix(prefix: String): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.addSuffix(suffix: SourceSetName): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.addSuffix(suffix: String): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.hasPrefix(prefix: SourceSetName): Boolean</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.hasPrefix(prefix: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.removePrefix(prefix: SourceSetName): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.removePrefix(prefix: String): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.removeSuffix(suffix: SourceSetName): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun SourceSetName.removeSuffix(suffix: String): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetName.kt$fun String.asSourceSetName(): SourceSetName</ID>
    <ID>UndocumentedPublicFunction:SourceSetsFactory.kt$SourceSetsFactory$fun create( gradleProject: GradleProject, configurations: Configurations, hasTestFixturesPlugin: Boolean ): SourceSets</ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$Suppressions$fun get(dependency: Dependency): Set&lt;FindingName></ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$Suppressions$fun get(findingName: FindingName): Set&lt;Dependency></ID>
    <ID>UndocumentedPublicFunction:Suppressions.kt$suspend fun &lt;T> T.getSuppressions(): Suppressions</ID>
    <ID>UndocumentedPublicFunction:TestSettings.kt$TestSettings$@Suppress("UNUSED") fun checks(block: ChecksSettings.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:TestSettings.kt$TestSettings$@Suppress("UNUSED") fun sort(block: SortSettings.() -> Unit): Unit</ID>
    <ID>UndocumentedPublicFunction:TransitiveProjectDependency.kt$TransitiveProjectDependency$fun withContributedConfiguration( configurationName: ConfigurationName = source.configurationName ): TransitiveProjectDependency</ID>
    <ID>UndocumentedPublicFunction:TypeSafeProjectPathResolver.kt$AllProjectPathsProvider$fun getAllPaths(): List&lt;StringProjectPath></ID>
    <ID>UndocumentedPublicFunction:TypeSafeProjectPathResolver.kt$TypeSafeProjectPathResolver$fun resolveStringProjectPath(typeSafe: TypeSafeProjectPath): StringProjectPath</ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$UnusedDependencies$suspend fun all(): List&lt;UnusedDependency></ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$UnusedDependencies$suspend fun get(configurationName: ConfigurationName): Set&lt;UnusedDependency></ID>
    <ID>UndocumentedPublicFunction:UnusedDependencies.kt$suspend fun ProjectContext.unusedDependencies(): UnusedDependencies</ID>
    <ID>UndocumentedPublicFunction:UnusedDependency.kt$UnusedDependency$fun toFinding(findingName: FindingName): UnusedDependencyFinding</ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$UnusedKaptProcessors$suspend fun all(): List&lt;UnusedKaptProcessorFinding></ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$UnusedKaptProcessors$suspend fun get( configurationName: ConfigurationName ): Set&lt;UnusedKaptProcessorFinding></ID>
    <ID>UndocumentedPublicFunction:UnusedKaptProcessors.kt$suspend fun ProjectContext.unusedKaptProcessors(): UnusedKaptProcessors</ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.androidBlocks(): List&lt;KtCallExpression></ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.buildFeaturesBlocks(): List&lt;KtCallExpression></ID>
    <ID>UndocumentedPublicFunction:androidPsi.kt$fun PsiElement.inBuildscript(): Boolean</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T : Any, E> T.applyEach(elements: Iterable&lt;E>, block: T.(E) -> Unit): T</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T> T.applyIf(predicate: Boolean, body: T.() -> T): T</ID>
    <ID>UndocumentedPublicFunction:apply.kt$inline fun &lt;T> T.letIf(predicate: Boolean, body: (T) -> T): T</ID>
    <ID>UndocumentedPublicFunction:asserts.kt$fun &lt;T : Any> T?.requireNotNullOrFail( lazyMessage: () -> String = { "The receiver cannot be null, but it was. ¯\\_(ツ)_/¯" } ): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$@Suppress("NOTHING_TO_INLINE") inline fun &lt;T : Any> T?.requireNotNull(): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$@Suppress("UNCHECKED_CAST", "NOTHING_TO_INLINE") inline fun &lt;T> Any.cast(): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$inline fun &lt;T : Any> T?.requireNotNull(lazyMessage: () -> Any): T</ID>
    <ID>UndocumentedPublicFunction:cast.kt$inline fun &lt;reified T : Any> Any?.safeAs(): T?</ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;C : Collection&lt;T>, T, R> C.mapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> R ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;T, R> Iterable&lt;T>.flatMapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> Iterable&lt;R> ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:collection.kt$inline fun &lt;T, R> Sequence&lt;T>.flatMapToSet( destination: MutableSet&lt;R> = mutableSetOf(), transform: (T) -> Iterable&lt;R> ): Set&lt;R></ID>
    <ID>UndocumentedPublicFunction:comparable.kt$infix fun &lt;T> Comparable&lt;T>.isGreaterThan(other: T): Boolean</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$@Suppress("LongParameterList") fun ExternalDependencyDeclaration( configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList(), group: String?, moduleName: String, version: String?, coordinates: MavenCoordinates = MavenCoordinates(group, moduleName, version) ): ExternalDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$@Suppress("LongParameterList") fun ModuleDependencyDeclaration( projectPath: ProjectPath, projectAccessor: String, configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList() ): ModuleDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:declarationFactories.kt$fun UnknownDependencyDeclaration( argument: String, configName: ConfigurationName, declarationText: String, statementWithSurroundingText: String, suppressed: List&lt;String> = emptyList() ): UnknownDependencyDeclaration</ID>
    <ID>UndocumentedPublicFunction:defaultCodeGeneratorBindings.kt$fun defaultCodeGeneratorBindings(): List&lt;CodeGeneratorBinding></ID>
    <ID>UndocumentedPublicFunction:factories.kt$fun buildFileParserFactory( projectDependencyFactory: ProjectDependency.Factory, logger: McLogger = PrintLogger() ): BuildFileParser.Factory</ID>
    <ID>UndocumentedPublicFunction:factories.kt$inline fun &lt;reified T, reified P, G> T.toRealMcProject(): McProject</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.child(vararg childPath: String): File</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.createSafely(content: String? = null): File</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.existsOrNull(): File?</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.findMinimumIndent(): String</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeGroovy( @Language("groovy") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeJava( @Language("java") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun File.writeKotlin( @Language("kotlin") content: String )</ID>
    <ID>UndocumentedPublicFunction:file.kt$fun Path.child(vararg childPath: String): File</ID>
    <ID>UndocumentedPublicFunction:kotlinStdLibNames.kt$fun ReferenceName.kotlinStdLibNameOrNull(): QualifiedDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:kotlinStdLibNames.kt$fun String.kotlinStdLibNameOrNull(): QualifiedDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtCallableDeclaration.isJvmStatic(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtFunction.jvmNameOrNull(): String?</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtProperty.isJvmField(): Boolean</ID>
    <ID>UndocumentedPublicFunction:ktCallableDeclaration.kt$fun KtPropertyAccessor.jvmNameOrNull(): String?</ID>
    <ID>UndocumentedPublicFunction:lazy.kt$fun &lt;T> unsafeLazy(initializer: () -> T): Lazy&lt;T></ID>
    <ID>UndocumentedPublicFunction:list.kt$fun List&lt;String>.positionOf( path: String, configuration: ConfigurationName ): Position?</ID>
    <ID>UndocumentedPublicFunction:mcProject.kt$suspend fun ConfiguredDependency.positionIn( dependentProject: McProject ): Position?</ID>
    <ID>UndocumentedPublicFunction:mcProject.kt$suspend fun ConfiguredDependency.statementOrNullIn( dependentProject: McProject ): DependencyDeclaration?</ID>
    <ID>UndocumentedPublicFunction:modify.kt$fun HasDependencyDeclarations.removeDependencyWithComment( statement: BuildFileStatement, fixLabel: String, configuredDependency: ConfiguredDependency? = null )</ID>
    <ID>UndocumentedPublicFunction:modify.kt$fun HasDependencyDeclarations.removeDependencyWithDelete( statement: BuildFileStatement, configuredDependency: ConfiguredDependency? = null )</ID>
    <ID>UndocumentedPublicFunction:project.kt$fun Boolean?.orPropertyDefault( gradleProject: GradleProject, key: String, defaultValue: Boolean ): Boolean</ID>
    <ID>UndocumentedPublicFunction:project.kt$fun FileTreeWalk.files(): Sequence&lt;File></ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$@Suppress("NestedBlockDepth", "ComplexMethod") suspend fun PsiElement.declaredNameOrNull( project: McProject, sourceSetName: SourceSetName ): QualifiedDeclaredName?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KotlinType.asReferenceName(): ReferenceName</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KotlinType?.requireReferenceName(): ReferenceName</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtAnnotated.hasAnnotation(annotationFqName: FqName): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtBlockExpression.nameSafe(): String?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtCallExpression.nameSafe(): String?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtDeclaration.isInObject(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtDeclaration.isInObjectOrCompanionObject(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtProperty.resolveType(bindingContext: BindingContext): VariableDescriptor?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun KtPropertyDelegate.returnType(bindingContext: BindingContext): KotlinType?</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun PsiElement.file(): File</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$fun PsiElement.isQualifiedPropertyOrCallExpression(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$inline fun &lt;reified T : PsiElement> PsiElement.getChildrenOfTypeRecursive(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$inline fun &lt;reified T : PsiElement> PsiElement.isPartOf(): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$suspend fun McProject.canResolveDeclaredName( declaredName: QualifiedDeclaredName, sourceSetName: SourceSetName ): Boolean</ID>
    <ID>UndocumentedPublicFunction:psiElement.kt$suspend fun McProject.canResolveReferenceName( declaredName: ReferenceName, sourceSetName: SourceSetName ): Boolean</ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any, reified R : Any> T.getPrivateFieldByName(name: String): R</ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any> KClass&lt;T>.sealedSubclassConstructorsRecursive(): Sequence&lt;KFunction&lt;T>></ID>
    <ID>UndocumentedPublicFunction:reflection.kt$inline fun &lt;reified T : Any> KClass&lt;T>.sealedSubclassInstances(vararg args: Any?): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: ( group1: String, group2: String, group3: String, group4: String, group5: String ) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String, group3: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:regex.kt$inline fun String.replaceDestructured( regex: Regex, crossinline transform: (group1: String, group2: String, group3: String, group4: String) -> String ): String</ID>
    <ID>UndocumentedPublicFunction:sourceSetName.kt$fun SourceSetName.apiConfig(): ConfigurationName</ID>
    <ID>UndocumentedPublicFunction:sourceSetName.kt$fun SourceSetName.implementationConfig(): ConfigurationName</ID>
    <ID>UndocumentedPublicFunction:sourceSetName.kt$fun SourceSetName.javaConfigurationNames(): List&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun append(c: Char)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun append(str: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun appendLine(c: Char)</ID>
    <ID>UndocumentedPublicFunction:string.kt$IndentScope$fun appendLine(str: String)</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.capitalize( locale: Locale = Locale.US ): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.decapitalize( locale: Locale = Locale.US ): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.findMinimumIndent( absoluteMinimum: String = " " ): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.positionOfStatement(statement: String): Position</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.prefixIfNot(prefix: String): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.remove(vararg patterns: Regex): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.remove(vararg strings: String): String</ID>
    <ID>UndocumentedPublicFunction:string.kt$fun String.suffixIfNot(suffix: String): String</ID>
    <ID>UndocumentedPublicFunction:uses.kt$suspend fun McProject.uses(dependency: ConfiguredDependency): Boolean</ID>
    <ID>UndocumentedPublicFunction:util.kt$fun KtElement.requireSimpleName(): SimpleName</ID>
    <ID>UndocumentedPublicFunction:util.kt$fun KtValueArgumentList.getByNameOrIndex(index: Int, name: String): KtValueArgument?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun &lt;T : Node> T.simpleName(): String</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun &lt;T, R : ResolvedDeclaration> T.fqNameOrNull( typeDeclarations: List&lt;TypeDeclaration&lt;*>> ): String?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$fun Node.childrenRecursive(): Sequence&lt;Node></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildOfType(): T?</ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildrenOfType(): List&lt;T></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.getChildrenOfTypeRecursive(): Sequence&lt;T></ID>
    <ID>UndocumentedPublicFunction:visitor.kt$inline fun &lt;reified T : Node> Node.requireChildOfType(): T</ID>
    <ID>UndocumentedPublicProperty:AbstractDependenciesBlock.kt$AbstractDependenciesBlock.Companion$val testFixturesRegex: Regex = "testFixtures\\([\\s\\S]*\\)".toRegex()</ID>
    <ID>UndocumentedPublicProperty:AbstractModuleCheckTask.kt$AbstractModuleCheckTask$@get:Input val settings: ModuleCheckExtension = project.extensions .getByType(ModuleCheckExtension::class.java)</ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val androidBlocks: List&lt;AgpBlock.AndroidBlock></ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val assignments: List&lt;Assignment></ID>
    <ID>UndocumentedPublicProperty:AndroidGradleSettings.kt$AndroidGradleSettings$val buildFeaturesBlocks: List&lt;AgpBlock.BuildFeaturesBlock></ID>
    <ID>UndocumentedPublicProperty:AndroidStylesFile.kt$AndroidStylesFile$val name: String = file.nameWithoutExtension</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilAnnotatedType$val contributedScope: AnvilScopeName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilAnnotatedType$val contributedTypeDeclaration: QualifiedDeclaredName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilGradlePlugin$val generateDaggerFactories: Boolean</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilGradlePlugin$val version: SemVer</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilScopeName$val fqName: FqName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$AnvilScopeNameEntry$val name: ReferenceName</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$RawAnvilAnnotatedType$val anvilScopeNameEntry: AnvilScopeNameEntry</ID>
    <ID>UndocumentedPublicProperty:AnvilGradlePlugin.kt$RawAnvilAnnotatedType$val declaredName: QualifiedDeclaredName</ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val contributions: MutableSet&lt;QualifiedDeclaredName></ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val merges: MutableSet&lt;QualifiedDeclaredName></ID>
    <ID>UndocumentedPublicProperty:AnvilGraph.kt$AnvilScopedDeclarations$val scopeName: AnvilScopeName</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val fullText: String</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val propertyFullName: String</ID>
    <ID>UndocumentedPublicProperty:Assignment.kt$Assignment$val value: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val fullText: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val lambdaContent: String</ID>
    <ID>UndocumentedPublicProperty:Block.kt$Block$val settings: List&lt;T></ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val declarationText: String</ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val statementWithSurroundingText: String</ID>
    <ID>UndocumentedPublicProperty:BuildFileStatement.kt$BuildFileStatement$val suppressed: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:CodeGeneratorBinding.kt$CodeGeneratorBinding.KotlinCompilerPlugin$val gradlePlugin: PluginDefinition</ID>
    <ID>UndocumentedPublicProperty:ConfigBuilder.kt$ConfigBuilder$val downstream: MutableList&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicProperty:ConfigBuilder.kt$ConfigBuilder$val name: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:ConfigBuilder.kt$ConfigBuilder$val upstream: MutableList&lt;ConfigurationName></ID>
    <ID>UndocumentedPublicProperty:ConfigurationName.kt$ConfigurationName.Companion$val mainConfigurations: List&lt;String> = listOf( api.value, compile.value, compileOnly.value, compileOnlyApi.value, implementation.value, kapt.value, // kotlinCompilerPluginClasspath is a special case, // since the main config is suffixed with "Main" kotlinCompileClasspath.value, runtime.value, runtimeOnly.value ) /** * The order of this list matters. CompileOnlyApi must be before `api` or * `extractSourceSetName` below will match the wrong suffix. * * @since 0.12.0 */ .sortedByDescending { it.length }</ID>
    <ID>UndocumentedPublicProperty:ConfiguredDependency.kt$ConfiguredDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:CoroutineScopeModule.kt$DispatcherProviderComponent$val dispatcherProvider: DispatcherProvider</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$DependencyDeclaration$val configName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val coordinates: MavenCoordinates</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val group: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val moduleName: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ExternalDependencyDeclaration$val version: String?</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val projectAccessor: ProjectAccessor</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$ModuleDependencyDeclaration$val projectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$UnknownDependencyDeclaration$val argument: String</ID>
    <ID>UndocumentedPublicProperty:DependencyDeclaration.kt$UnknownDependencyDeclaration$val configurationNameTransform: ConfigurationNameTransform</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val dependencyProjectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val isTestFixture: Boolean</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceKey$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DependencySources.kt$DependencySources.SourceResult.Found$val sourceDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val children: List&lt;DepthFinding></ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val depth: Int</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DepthFinding.kt$DepthFinding.Companion$val NAME: FindingName = FindingName("project-depth")</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val children: List&lt;ProjectDepth></ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val depth: Int</ID>
    <ID>UndocumentedPublicProperty:Depths.kt$ProjectDepth$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:DocumentedRule.kt$DocumentedRule.Companion$const val RULES_BASE_URL: String = "https://rbusarow.github.io/ModuleCheck/docs/rules/"</ID>
    <ID>UndocumentedPublicProperty:DownstreamDependency.kt$DownstreamDependency$val dependentProjectPath: ProjectPath.StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:DownstreamDependency.kt$DownstreamDependency$val projectDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val group: String?</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val moduleName: String</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$abstract val version: String?</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$val nameWithVersion: String by unsafeLazy { "${group.orEmpty()}:$moduleName:${version.orEmpty()}" }</ID>
    <ID>UndocumentedPublicProperty:ExternalDependency.kt$ExternalDependency$val nameWithoutVersion: String by unsafeLazy { "${group.orEmpty()}:$moduleName" }</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$ConfigurationFinding$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$ConfiguredDependencyFinding$val dependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$DependencyFinding$val statementOrNull: LazyDeferred&lt;BuildFileStatement?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$DependencyFinding$val statementTextOrNull: LazyDeferred&lt;String?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependencyIdentifier: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val findingName: FindingName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val message: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding$val positionOrNull: LazyDeferred&lt;Position?></ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val configurationName: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val dependencyIdentifier: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val dependentPath: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val filePathString: String = "${buildFile.path}: ${positionOrNull?.logString().orEmpty()}"</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val findingName: FindingName</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val fixed: Boolean</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val message: String</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val positionOrNull: Position?</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.FindingResult$val sourceOrNull: String?</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.Position$val column: Int</ID>
    <ID>UndocumentedPublicProperty:Finding.kt$Finding.Position$val row: Int</ID>
    <ID>UndocumentedPublicProperty:FindingFactory.kt$RuleFilter.Companion$val DEFAULT: RuleFilter = RuleFilter { rule, settings -> rule.shouldApply(settings) }</ID>
    <ID>UndocumentedPublicProperty:Fixable.kt$Fixable.Companion$const val FIX_LABEL: String = "// ModuleCheck finding"</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val inject: FqName = FqName("javax.inject.Inject")</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val jvmField: FqName = FqName("kotlin.jvm.JvmField")</ID>
    <ID>UndocumentedPublicProperty:FqNames.kt$FqNames$val jvmStatic: FqName = FqName("kotlin.jvm.JvmStatic")</ID>
    <ID>UndocumentedPublicProperty:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser.Companion$val BLOCK_BODY_REGEX: Regex = """dependencies\s*\{([\s\S]*)\}""".toRegex()</ID>
    <ID>UndocumentedPublicProperty:GroovyDependenciesBlockParser.kt$GroovyDependenciesBlockParser.Companion$val NO_INSPECTION_REGEX: Regex = """//noinspection\s+(.*)\n""".toRegex()</ID>
    <ID>UndocumentedPublicProperty:HasConfigurations.kt$HasConfigurations$val configurations: Configurations</ID>
    <ID>UndocumentedPublicProperty:HasConfigurations.kt$HasDependencies$val externalDependencies: ExternalDependencies</ID>
    <ID>UndocumentedPublicProperty:HasConfigurations.kt$HasDependencies$val projectDependencies: ProjectDependencies</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasIdentifier$val identifier: Identifier</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasMavenCoordinates$val mavenCoordinates: MavenCoordinates</ID>
    <ID>UndocumentedPublicProperty:HasIdentifier.kt$HasPath$val path: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:HasProjectCache.kt$HasProjectCache$val projectCache: ProjectCache</ID>
    <ID>UndocumentedPublicProperty:HasSuppressions.kt$HasSuppressedChildren$val allSuppressions: Map&lt;C, Set&lt;S>></ID>
    <ID>UndocumentedPublicProperty:HasSuppressions.kt$HasSuppressions$val suppressions: List&lt;T></ID>
    <ID>UndocumentedPublicProperty:InheritedDependencyFinding.kt$InheritedDependencyFinding$val source: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:InvokesConfigurationNames.kt$HasBuildFile$val buildFile: File</ID>
    <ID>UndocumentedPublicProperty:InvokesConfigurationNames.kt$HasBuildFile$val buildFileParser: BuildFileParser</ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val apiReferences: LazyDeferred&lt;Set&lt;ReferenceName>></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$JvmFile$val importsLazy: Lazy&lt;Set&lt;ReferenceName>></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$KotlinFile.ScopeArgumentParseResult$val contributeArguments: Set&lt;RawAnvilAnnotatedType></ID>
    <ID>UndocumentedPublicProperty:JvmFile.kt$KotlinFile.ScopeArgumentParseResult$val mergeArguments: Set&lt;RawAnvilAnnotatedType></ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val annotationImports: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val name: String</ID>
    <ID>UndocumentedPublicProperty:KaptMatcher.kt$KaptMatcher$val processor: String</ID>
    <ID>UndocumentedPublicProperty:LazyDeferred.kt$LazyDeferred$val isCompleted: Boolean</ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet$val isFullyCached: Boolean</ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet.State$val cache: Set&lt;E></ID>
    <ID>UndocumentedPublicProperty:LazySet.kt$LazySet.State$val remaining: List&lt;DataSource&lt;E>></ID>
    <ID>UndocumentedPublicProperty:MavenCoordinates.kt$Identifier$val name: String</ID>
    <ID>UndocumentedPublicProperty:McConfiguration.kt$McConfiguration$val externalDependencies: Set&lt;ExternalDependency></ID>
    <ID>UndocumentedPublicProperty:McConfiguration.kt$McConfiguration$val name: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:McConfiguration.kt$McConfiguration$val projectDependencies: Set&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicProperty:McLogger.kt$Report$val entries: List&lt;ReportEntry></ID>
    <ID>UndocumentedPublicProperty:McLogger.kt$Report.ReportEntry$val message: String</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val anvilGradlePlugin: AnvilGradlePlugin?</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val jvmFileProviderFactory: JvmFileProvider.Factory</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val logger: McLogger</ID>
    <ID>UndocumentedPublicProperty:McProject.kt$McProject$val projectDir: File</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val codeGeneratorBindings: List&lt;CodeGeneratorBinding></ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val configuredProjectDependencyFactory: RealConfiguredProjectDependencyFactory by lazy { RealConfiguredProjectDependencyFactory( pathResolver = TypeSafeProjectPathResolver(projectProvider), generatorBindings = codeGeneratorBindings ) }</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val dependencyModuleDescriptorAccess: DependencyModuleDescriptorAccess</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val platformPlugin: P</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val projectCache: ProjectCache</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$val projectProvider: ProjectProvider</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$var anvilGradlePlugin: AnvilGradlePlugin? = null</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$var jvmTarget: JvmTarget = JvmTarget.JVM_11</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$var path: StringProjectPath</ID>
    <ID>UndocumentedPublicProperty:McProjectBuilder.kt$McProjectBuilder$var projectDir: File</ID>
    <ID>UndocumentedPublicProperty:McSourceSet.kt$HasSourceSets$val sourceSets: SourceSets</ID>
    <ID>UndocumentedPublicProperty:McSourceSet.kt$McSourceSet$val configurations: Configurations by lazy { Configurations( sequenceOfNotNull( compileOnlyConfiguration, apiConfiguration, implementationConfiguration, runtimeOnlyConfiguration, annotationProcessorConfiguration ).associateBy { it.name } ) }</ID>
    <ID>UndocumentedPublicProperty:McSourceSet.kt$McSourceSet$val externalDependencies: ExternalDependencies by lazy { ExternalDependencies( configurations.mapValues { (_, configuration) -> configuration.externalDependencies } ) }</ID>
    <ID>UndocumentedPublicProperty:McSourceSet.kt$McSourceSet$val hasExistingSourceFiles: Boolean by lazy { jvmFiles.hasExistingFiles() || resourceFiles.hasExistingFiles() || layoutFiles.hasExistingFiles() }</ID>
    <ID>UndocumentedPublicProperty:McSourceSet.kt$McSourceSet$val projectDependencies: ProjectDependencies by lazy { ProjectDependencies( configurations.mapValues { (_, configuration) -> configuration.projectDependencies } ) }</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val description: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val documentationUrl: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRule.kt$ModuleCheckRule$val name: FindingName</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$@Assisted val autoCorrect: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val checkstyleReporter: CheckstyleReporter</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val dispatcherProvider: DispatcherProvider</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val graphvizFileWriter: GraphvizFileWriter</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val logger: McLogger</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val projectProvider: ProjectProvider</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val rules: DaggerList&lt;ModuleCheckRule&lt;*>></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val sarifReportFactory: SarifReportFactory</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner$val settings: ModuleCheckSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner.TimedResults$val data: R</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckRunner.kt$ModuleCheckRunner.TimedResults$val timeMillis: Long</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var anvilFactoryGeneration: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var depths: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var disableAndroidResources: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var disableViewBinding: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var inheritedDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var mustBeApi: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var overShotDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var redundantDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var sortDependencies: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var sortPlugins: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedDependency: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedKapt: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings$var unusedKotlinAndroidExtensions: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val ANVIL_FACTORY_GENERATION_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DEPTHS_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DISABLE_ANDROID_RESOURCES_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val DISABLE_VIEW_BINDING_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val INHERITED_DEPENDENCY_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val MUST_BE_API_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val OVERSHOT_DEPENDENCY_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val REDUNDANT_DEPENDENCY_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val SORT_DEPENDENCIES_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val SORT_PLUGINS_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_DEPENDENCY_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_KAPT_DEFAULT: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ChecksSettings.Companion$const val UNUSED_KOTLIN_ANDROID_EXTENSIONS_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ModuleCheckSettings$val checks: ChecksSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ModuleCheckSettings$val sort: SortSettings</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$PerModuleReportSettings$var enabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$PerModuleReportSettings$var outputDir: String?</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportSettings$var enabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportSettings$var outputPath: String</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val CHECKSTYLE_ENABLED_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val CHECKSTYLE_PATH_DEFAULT: String = "build/reports/modulecheck/report.xml"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val DEPTHS_ENABLED_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val DEPTHS_PATH_DEFAULT: String = "build/reports/modulecheck/depths.txt"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val GRAPH_ENABLED_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val SARIF_ENABLED_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val SARIF_PATH_DEFAULT: String = "build/reports/modulecheck/modulecheck.sarif"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val TEXT_ENABLED_DEFAULT: Boolean = false</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$ReportsSettings.Companion$const val TEXT_PATH_DEFAULT: String = "build/reports/modulecheck/report.txt"</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings$var dependencyComparators: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings$var pluginComparators: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings.Companion$val DEPENDENCY_COMPARATORS_DEFAULT: List&lt;String> = listOf( """.*""", """kapt.*""" )</ID>
    <ID>UndocumentedPublicProperty:ModuleCheckSettings.kt$SortSettings.Companion$val PLUGIN_COMPARATORS_DEFAULT: List&lt;String> = listOf( """id\("com\.android.*"\)""", """id\("android-.*"\)""", """id\("java-library"\)""", """kotlin\("jvm"\)""", """android.*""", """javaLibrary.*""", """kotlin.*""", """id.*""" )</ID>
    <ID>UndocumentedPublicProperty:MustBeApi.kt$InheritedDependencyWithSource$val projectDependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:MustBeApi.kt$InheritedDependencyWithSource$val source: ProjectDependency?</ID>
    <ID>UndocumentedPublicProperty:MustBeApiFinding.kt$MustBeApiFinding$val source: ProjectDependency?</ID>
    <ID>UndocumentedPublicProperty:NameParser.kt$ParsingInterceptor.Chain$val packet: NameParserPacket</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyFinding.kt$OverShotDependencyFinding$val oldDependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyFinding.kt$OverShotDependencyFinding.Companion$val NAME: FindingName = FindingName("overshot-dependency")</ID>
    <ID>UndocumentedPublicProperty:OverShotDependencyRule.kt$OverShotDependencyRule$val settings: ModuleCheckSettings</ID>
    <ID>UndocumentedPublicProperty:PackageName.kt$HasPackageName$val packageName: PackageName</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val kotlinAndroidExtensionEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val manifests: Map&lt;SourceSetName, File></ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val nonTransientRClass: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin$val viewBindingEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin.CanDisableAndroidBuildConfig$val buildConfigEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPlugin.kt$AndroidPlatformPlugin.CanDisableAndroidResources$val androidResourcesEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidDynamicFeaturePluginBuilder$var buildConfigEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidLibraryPluginBuilder$var androidResourcesEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidLibraryPluginBuilder$var buildConfigEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder$val manifests: MutableMap&lt;SourceSetName, File></ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder$val resValues: MutableMap&lt;SourceSetName, Set&lt;UnqualifiedAndroidResource>></ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder$var kotlinAndroidExtensionEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder$var nonTransientRClass: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidPlatformPluginBuilder$var viewBindingEnabled: Boolean</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$AndroidTestPluginBuilder$var buildConfigEnabled: Boolean = true</ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$PlatformPluginBuilder$val configurations: MutableMap&lt;ConfigurationName, ConfigBuilder></ID>
    <ID>UndocumentedPublicProperty:PlatformPluginBuilder.kt$PlatformPluginBuilder$val sourceSets: MutableMap&lt;SourceSetName, SourceSetBuilder></ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$HasPlatformPlugin$val platformPlugin: PlatformPlugin</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasAGP: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasAnvil: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasKapt: Boolean</ID>
    <ID>UndocumentedPublicProperty:PluginAware.kt$PluginAware$val hasTestFixturesPlugin: Boolean</ID>
    <ID>UndocumentedPublicProperty:ProjectAccessor.kt$ProjectAccessor$val projectPath: ProjectPath</ID>
    <ID>UndocumentedPublicProperty:ProjectAccessor.kt$ProjectAccessor$val statementText: String</ID>
    <ID>UndocumentedPublicProperty:ProjectCache.kt$ProjectCache$val values: MutableCollection&lt;McProject> get() = delegate.values</ID>
    <ID>UndocumentedPublicProperty:ProjectCollector.kt$ProjectCollector$val codeGeneratorBindings: List&lt;CodeGeneratorBinding></ID>
    <ID>UndocumentedPublicProperty:ProjectCollector.kt$ProjectCollector$val dependencyModuleDescriptorAccess: DependencyModuleDescriptorAccess</ID>
    <ID>UndocumentedPublicProperty:ProjectCollector.kt$ProjectCollector$val projectCache: ProjectCache</ID>
    <ID>UndocumentedPublicProperty:ProjectCollector.kt$ProjectCollector$val projectProvider: ProjectProvider get() = object : ProjectProvider { override val projectCache: ProjectCache get() = this@ProjectCollector.projectCache override fun get(path: ProjectPath): McProject { return projectCache.getValue(path) } override fun getAll(): List&lt;McProject> = allProjects() override fun clearCaches() { allProjects().forEach { it.clearContext() } } }</ID>
    <ID>UndocumentedPublicProperty:ProjectCollector.kt$ProjectCollector$val root: File</ID>
    <ID>UndocumentedPublicProperty:ProjectContext.kt$ProjectContext.Element$val key: Key&lt;*></ID>
    <ID>UndocumentedPublicProperty:ProjectPath.kt$ProjectPath$val typeSafeValue: String by lazy { when (this) { is StringProjectPath -> value.typeSafeName() is TypeSafeProjectPath -> value } }</ID>
    <ID>UndocumentedPublicProperty:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText$val psiElement: PsiElement</ID>
    <ID>UndocumentedPublicProperty:PsiElementWithSurroundingText.kt$PsiElementWithSurroundingText$val statementText: String = psiElement.text</ID>
    <ID>UndocumentedPublicProperty:RealAndroidPlatformPluginFactory.kt$RealAndroidPlatformPluginFactory.Type$val extension: T</ID>
    <ID>UndocumentedPublicProperty:RealKotlinFile.kt$RealKotlinFile$val constructorInjectedParams: LazyDeferred&lt;Set&lt;QualifiedDeclaredName>> = lazyDeferred { referenceVisitor.constructorInjected.mapNotNull { psiResolver.declaredNameOrNull(it) }.toSet() }</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val dependency: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependency$val from: List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicProperty:RedundantDependencyFinding.kt$RedundantDependencyFinding$val from: List&lt;ProjectDependency></ID>
    <ID>UndocumentedPublicProperty:RemovesDependency.kt$RemovesDependency$val oldDependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.McProjectWithSourceSetName$val declaration: QualifiedDeclaredName</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.McProjectWithSourceSetName$val project: McProject</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.McProjectWithSourceSetName$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.NameInSourceSet$val name: ResolvableMcName</ID>
    <ID>UndocumentedPublicProperty:ResolvedDeclaredNames.kt$ResolvedDeclaredNames.NameInSourceSet$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:RulesComponent.kt$RulesComponent$val allRules: DaggerList&lt;ModuleCheckRule&lt;*>></ID>
    <ID>UndocumentedPublicProperty:RunnerComponent.kt$RunnerComponent$val runnerFactory: ModuleCheckRunner.Factory</ID>
    <ID>UndocumentedPublicProperty:SafeCache.kt$SafeCache$val values: Flow&lt;V></ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$BaselineState$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$ColumnKind$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Content$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Importance$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$Level$val value: String</ID>
    <ID>UndocumentedPublicProperty:SarifReport.kt$ResultKind$val value: String</ID>
    <ID>UndocumentedPublicProperty:SortDependenciesFinding.kt$SortDependenciesFinding.Companion$val NAME: FindingName = FindingName("sort-dependencies")</ID>
    <ID>UndocumentedPublicProperty:SortPluginsFinding.kt$SortPluginsFinding$val comparator: Comparator&lt;PluginDeclaration></ID>
    <ID>UndocumentedPublicProperty:SortPluginsFinding.kt$SortPluginsFinding.Companion$val NAME: FindingName = FindingName("sort-plugins")</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$val downstream: MutableList&lt;SourceSetName></ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$val upstream: MutableList&lt;SourceSetName></ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var annotationProcessorConfiguration: McConfiguration?</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var apiConfiguration: McConfiguration?</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var classpath: MutableList&lt;File> = mutableListOf( File(CharRange::class.java.protectionDomain.codeSource.location.path) )</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var compileOnlyConfiguration: McConfiguration</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var implementationConfiguration: McConfiguration</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var jvmFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var jvmTarget: JvmTarget = JVM_11</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var kotlinLanguageVersion: LanguageVersion? = null</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var layoutFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var name: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var resourceFiles: Set&lt;File></ID>
    <ID>UndocumentedPublicProperty:SourceSetBuilder.kt$SourceSetBuilder$var runtimeOnlyConfiguration: McConfiguration</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency$val isTestFixture: Boolean</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency$val sourceSetName: SourceSetName</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val group: String?</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val moduleName: String</ID>
    <ID>UndocumentedPublicProperty:SourceSetDependency.kt$SourceSetDependency.SourceSetExternalDependency$val version: String?</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName$val value: String</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val ANDROID_TEST: SourceSetName = SourceSetName("androidTest")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val ANVIL: SourceSetName = SourceSetName("anvil")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val DEBUG: SourceSetName = SourceSetName("debug")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val KAPT: SourceSetName = SourceSetName("kapt")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val MAIN: SourceSetName = SourceSetName("main")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val RELEASE: SourceSetName = SourceSetName("release")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val TEST: SourceSetName = SourceSetName("test")</ID>
    <ID>UndocumentedPublicProperty:SourceSetName.kt$SourceSetName.Companion$val TEST_FIXTURES: SourceSetName = SourceSetName("testFixtures")</ID>
    <ID>UndocumentedPublicProperty:TaskComponent.kt$TaskComponent$val projectProvider: GradleProjectProvider</ID>
    <ID>UndocumentedPublicProperty:Trace.kt$HasTraceTags$val tags: Iterable&lt;Any></ID>
    <ID>UndocumentedPublicProperty:Trace.kt$Trace$abstract val depth: Int</ID>
    <ID>UndocumentedPublicProperty:Trace.kt$Trace$val tags: List&lt;String></ID>
    <ID>UndocumentedPublicProperty:TransitiveProjectDependency.kt$TransitiveProjectDependency$val contributed: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:TransitiveProjectDependency.kt$TransitiveProjectDependency$val source: ProjectDependency</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val configurationName: ConfigurationName</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependency: ConfiguredDependency</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependencyIdentifier: Identifier</ID>
    <ID>UndocumentedPublicProperty:UnusedDependency.kt$UnusedDependency$val dependentProject: McProject</ID>
    <ID>UndocumentedPublicProperty:UnusedKaptProcessorRule.kt$const val KAPT_ALTERNATE_PLUGIN_ID: String = "kotlin-kapt"</ID>
    <ID>UndocumentedPublicProperty:UnusedKaptProcessorRule.kt$const val KAPT_PLUGIN_ID: String = "org.jetbrains.kotlin.kapt"</ID>
    <ID>UndocumentedPublicProperty:UnusedKotlinAndroidExtensionsRule.kt$const val KOTLIN_ANDROID_EXTENSIONS_PLUGIN_ID: String = "org.jetbrains.kotlin.android.extensions"</ID>
    <ID>UndocumentedPublicProperty:UnusedPluginFinding.kt$UnusedPluginFinding$val pluginDefinition: PluginDefinition</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile$val file: File</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile$val resourceReferencesAsRReferences: Set&lt;String></ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.Companion$val REFERENCE_PREFIXES: List&lt;String> = listOf( "@anim/", "@animator/", "@arrays/", "@color/", "@dimen/", "@drawable/", "@font/", "@layout/", "@menu/", "@mipmap/", "@raw/", "@string/", "@style/" )</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.LayoutFile$val name: String = file.nameWithoutExtension</ID>
    <ID>UndocumentedPublicProperty:XmlFile.kt$XmlFile.ManifestFile$val basePackage: PackageName? by lazy { AndroidManifestParser().parse(file)["package"]?.let { PackageName(it) } }</ID>
    <ID>UnnecessaryAbstractClass:ModuleCheckBuildTask.kt$ModuleCheckBuildCodeGeneratorTask$ModuleCheckBuildCodeGeneratorTask</ID>
    <ID>UnnecessaryAbstractClass:ModuleCheckBuildTask.kt$ModuleCheckBuildTask$ModuleCheckBuildTask</ID>
    <ID>UnusedPrivateMember:RealConfigurationsFactory.kt$RealConfigurationsFactory.Companion$private const val TEST_FIXTURES_PLUGIN_ID = "java-test-fixtures"</ID>
  </CurrentIssues>
</SmellBaseline>
