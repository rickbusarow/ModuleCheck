name: Set Gradle Args for runner OS
description: Sets gradle property and jvm arguments based on runner OS

outputs:
  gradle-property-args:
    description: "ex: -Dfile.encoding=UTF-8"
    value: ${{ steps.set-args.outputs.gradle-property-args }}
  gradle-jvm-args:
    description: "ex: -Xmx5g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
    value: ${{ steps.set-args.outputs.gradle-jvm-args }}

runs:
  using: composite
  steps:
    - id: set-args
      shell: bash
      run: |
        runnerOS=$RUNNER_OS

        totalMemory=0
        memoryOverhead=0

        case $runnerOS in
          macOS)
            totalMemory=$(sysctl -n hw.memsize | awk '{print int($1/1024/1024/1024+0.5)}')
            memoryOverhead=3
            ;;
          Linux)
            totalMemory=$(awk '/MemTotal/ {print int($2/1024/1024+0.5)}' /proc/meminfo)
            memoryOverhead=3
            ;;
          Windows)
            # Fetch and parse memory in MB, then convert to GB
            totalMemory=$(powershell -Command "& { [Math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1GB) }")

            # Check if totalMemory is a valid number
            if ! [[ "$totalMemory" =~ ^[0-9]+$ ]]; then
              echo "Failed to retrieve or parse total memory: $totalMemory"
              exit 1
            fi
            memoryOverhead=3
            ;;
          *)
            echo "Unsupported runner OS: $runnerOS"
            exit 1
            ;;
        esac

        availableMemory=$((totalMemory - memoryOverhead))

        jvmArgs="-Xmx${availableMemory}g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"

        propertyArgs="-Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false"

        echo "gradle-property-args=$propertyArgs" >> $GITHUB_OUTPUT
        echo "gradle-jvm-args=$jvmArgs" >> $GITHUB_OUTPUT
