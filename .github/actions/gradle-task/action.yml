name: 'Set Up Gradle and Run Task'
description: 'This action performs common steps for a specific task.'

inputs:
  task:
    description: 'The task to be executed.'
    required: true
  java-version:
    description: 'The Java version to set up.'
    default: '17'
  distribution:
    description: 'The JDK distribution to use.'
    default: 'zulu'
  restore-cache-key:
    description: 'The unique identifier for the associated cache.  Any other consumers or producers for this cache must use the same name.'
    default: 'null'
  write-cache-key:
    description: 'The unique identifier for the associated cache.  Any other consumers or producers for this cache must use the same name.'
    default: 'null'

runs:
  using: 'composite'
  steps:

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.distribution }}
        java-version: ${{ inputs.java-version }}

    - name: Set Gradle Args for runner OS
      id: gradle-args
      uses: ./.github/actions/gradle-args

    - name: Gradle build action
      uses: gradle/gradle-build-action@v2
      with:
        cache-read-only: false
        gradle-home-cache-cleanup: true

    - name: check-write-cache-hit ${{inputs.write-cache-key}}
      id: check-write-cache-hit
      if: ${{inputs.write-cache-key}} != 'null'
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.gradle/caches/build-cache-1
          ~/.gradle/wrapper
        key: ${{inputs.write-cache-key}}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/libs.versions.toml') }}-${{ hashFiles('**/gradle.properties') }}
        enableCrossOsArchive: true
        lookup-only: true

    - name: restore cache for ${{inputs.restore-cache-key}}
      if: ${{inputs.restore-cache-key}} != 'null' && steps.check-write-cache-hit.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.gradle/caches/build-cache-1
          ~/.gradle/wrapper
        key: ${{inputs.restore-cache-key}}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/libs.versions.toml') }}-${{ hashFiles('**/gradle.properties') }}
        restore-keys: ${{inputs.restore-cache-key}}
        enableCrossOsArchive: true

    - name: set up cache for ${{inputs.write-cache-key}}
      if: ${{inputs.write-cache-key}} != 'null' && steps.check-write-cache-hit.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches/build-cache-1
          ~/.gradle/wrapper
        key: ${{inputs.write-cache-key}}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/libs.versions.toml') }}-${{ hashFiles('**/gradle.properties') }}
        restore-keys: ${{inputs.write-cache-key}}
        enableCrossOsArchive: true

    - uses: gradle/wrapper-validation-action@v1

    - name: Run ${{ inputs.task }}
      uses: gradle/gradle-build-action@v2
      with:
        # These arguments probably need to be on a single line. If they're defined with wrapping
        # (using `|`), something along the way to the actual CLI invocation gets confused and the
        # jvmargs list winds up getting parsed as a single argument.
        arguments: ${{ steps.gradle-args.outputs.gradle-property-args }} ${{ inputs.task }} '-Dorg.gradle.jvmargs=${{ steps.gradle-args.outputs.gradle-jvm-args }}'
        cache-read-only: false
        gradle-home-cache-cleanup: true

    - name: Upload heap dump
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: heap-dump
        path: ${{ github.workspace }}/**/*{.hprof,.log}
