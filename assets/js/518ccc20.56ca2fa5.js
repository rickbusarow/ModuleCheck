"use strict";(self.webpackChunkmodulecheck=self.webpackChunkmodulecheck||[]).push([[610],{7357:(e,t,n)=>{n.d(t,{A:()=>o});n(36672);var r=n(13526);const a={tabItem:"tabItem_qogc"};var s=n(23420);function o({children:e,hidden:t,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,n),hidden:t,children:e})}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var r=n(36672);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},82270:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>u,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"configuration","title":"configuration","description":"","source":"@site/versioned_docs/version-0.12.0/configuration.mdx","sourceDirName":".","slug":"/configuration","permalink":"/ModuleCheck/docs/0.12.0/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/rbusarow/ModuleCheck/blob/main/website/versioned_docs/version-0.12.0/configuration.mdx","tags":[],"version":"0.12.0","frontMatter":{"id":"configuration","sidebar_label":"Configuration"},"sidebar":"Docs","previous":{"title":"Quick Start","permalink":"/ModuleCheck/docs/0.12.0/"},"next":{"title":"Suppressing Findings","permalink":"/ModuleCheck/docs/0.12.0/suppressing-findings"}}');var a=n(23420),s=n(65404),o=n(83796),l=n(7357);const u={id:"configuration",sidebar_label:"Configuration"},i=void 0,c={},d=[];function p(e){const t={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(o.A,{children:[(0,a.jsx)(l.A,{value:"Kotlin",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",metastring:'title="root/build.gradle.kts"',children:'plugins {\n  id("com.rickbusarow.module-check") version "0.12.0"\n}\n\nmoduleCheck {\n\n  deleteUnused = true // default is false\n\n  checks {\n    overShotDependency = true  // default is true\n    redundantDependency = false  // default is false\n    unusedDependency = true  // default is true\n    mustBeApi = true  // default is true\n    inheritedDependency = true  // default is true\n    sortDependencies = false  // default is false\n    sortPlugins = false  // default is false\n    unusedKapt = true  // default is true\n    anvilFactoryGeneration = true  // default is true\n    disableAndroidResources = false  // default is false\n    disableViewBinding = false  // default is false\n    unusedKotlinAndroidExtensions = false  // default is false\n    depths = false  // default is false\n  }\n\n  // allow these modules to be declared as dependency anywhere,\n  // regardless of whether they\'re used\n  ignoreUnusedFinding = setOf(":test:core-jvm", ":test:core-android")\n\n  // do not check the dependencies of these modules.\n  // in this case, :app could declare any module it wants without issue\n  doNotCheck = setOf(":app")\n\n  additionalKaptMatchers = listOf(\n    modulecheck.api.KaptMatcher(\n      name = "MyProcessor",\n      processor = "my-project.codegen:processor",\n      annotationImports = listOf(\n        "myproject\\\\.\\\\*",\n        "myproject\\\\.MyInject",\n        "myproject\\\\.MyInject\\\\.Factory",\n        "myproject\\\\.MyInjectParam",\n        "myproject\\\\.MyInjectModule"\n      )\n    )\n  )\n\n  reports {\n    checkstyle {\n      enabled = true  // default is false\n      outputPath = "${project.buildDir}/reports/modulecheck/checkstyle.xml"\n    }\n    depths {\n      enabled = true  // default is false\n      outputPath = "${project.buildDir}/reports/modulecheck/depths.txt"\n    }\n    graphs {\n      enabled = true  // default is false\n      // The root directory of all generated graphs.  If set, directories will be created\n      // for each module, mirroring the structure of the project.  If this property is null,\n      // graphs will be created in the `build/reports/modulecheck/graphs/` relative\n      // directory of each project.\n      outputDir = "${project.buildDir}/reports/modulecheck/graphs"\n    }\n    text {\n      enabled = true  // default is false\n      outputPath = "${project.buildDir}/reports/modulecheck/report.txt"\n    }\n  }\n}\n'})})}),(0,a.jsx)(l.A,{value:"Groovy",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-groovy",metastring:'title="root/build.gradle"',children:'plugins {\n  id \'com.rickbusarow.module-check\' version \'0.12.0\'\n}\n\nmoduleCheck {\n  deleteUnused = true // default is false\n\n  checks {\n    overShotDependency = true  // default is true\n    redundantDependency = false  // default is false\n    unusedDependency = true  // default is true\n    mustBeApi = true  // default is true\n    inheritedDependency = true  // default is true\n    sortDependencies = false  // default is false\n    sortPlugins = false  // default is false\n    unusedKapt = true  // default is true\n    anvilFactoryGeneration = true  // default is true\n    disableAndroidResources = false  // default is false\n    disableViewBinding = false  // default is false\n    unusedKotlinAndroidExtensions = false  // default is false\n    depths = false  // default is false\n  }\n\n  // allow these modules to be declared as dependency anywhere,\n  // regardless of whether they\'re used\n  ignoreUnusedFinding = [\':test:core-jvm\', \':test:core-android\']\n\n  // do not check the dependencies of these modules.\n  // in this case, :app could declare any module it wants without issue\n  doNotCheck = [\':app\']\n\n  additionalKaptMatchers = [\n    new modulecheck.api.KaptMatcher(\n      \'MyProcessor\',\n      \'my-project.codegen:processor\',\n       [\n        "myproject\\\\.\\\\*",\n        "myproject\\\\.MyInject",\n        "myproject\\\\.MyInject\\\\.Factory",\n        "myproject\\\\.MyInjectParam",\n        "myproject\\\\.MyInjectModule"\n      ]\n    )\n  ]\n\n  reports {\n    checkstyle {\n      it.enabled = true  // default is false\n      it.outputPath = "${project.buildDir}/reports/modulecheck/checkstyle.xml"\n    }\n    depths {\n      it.enabled = true  // default is false\n      it.outputPath = "${project.buildDir}/reports/modulecheck/depths.txt"\n    }\n    graphs {\n      it.enabled = true  // default is false\n      // The root directory of all generated graphs.  If set, directories will be created\n      // for each module, mirroring the structure of the project.  If this property is null,\n      // graphs will be created in the `build/reports/modulecheck/graphs/` relative\n      // directory of each project.\n      it.outputDir = "${project.buildDir}/reports/modulecheck/graphs"\n    }\n    text {\n      it.enabled = true  // default is false\n      it.outputPath = "${project.buildDir}/reports/modulecheck/report.txt"\n    }\n  }\n\n}\n'})})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},83796:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(36672),a=n(13526),s=n(58797),o=n(85291),l=n(52245),u=n(32342),i=n(45223),c=n(1771);function d(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)(()=>{const e=t??function(e){return d(e).map(({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r}))}(n);return function(e){const t=(0,i.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function f({value:e,tabValues:t}){return t.some(t=>t.value===e)}function h({queryString:e=!1,groupId:t}){const n=(0,o.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,u.aZ)(a),(0,r.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})},[a,n])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=p(e),[o,u]=(0,r.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s})),[i,d]=h({queryString:n,groupId:a}),[m,b]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,c.Dv)(t);return[n,(0,r.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),g=(()=>{const e=i??m;return f({value:e,tabValues:s})?e:null})();(0,l.A)(()=>{g&&u(g)},[g]);return{selectedValue:o,selectValue:(0,r.useCallback)(e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);u(e),d(e),b(e)},[d,b,s]),tabValues:s}}var b=n(64407);const g={tabList:"tabList_KWM2",tabItem:"tabItem_qGQB"};var y=n(23420);function v({className:e,block:t,selectedValue:n,selectValue:r,tabValues:o}){const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),i=e=>{const t=e.currentTarget,a=l.indexOf(t),s=o[a].value;s!==n&&(u(t),r(s))},c=e=>{let t=null;switch(e.key){case"Enter":i(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:o.map(({value:e,label:t,attributes:r})=>(0,y.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:i,...r,className:(0,a.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function k({lazy:e,children:t,selectedValue:n}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function j(e){const t=m(e);return(0,y.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,y.jsx)(v,{...t,...e}),(0,y.jsx)(k,{...t,...e})]})}function w(e){const t=(0,b.A)();return(0,y.jsx)(j,{...e,children:d(e.children)},String(t))}}}]);